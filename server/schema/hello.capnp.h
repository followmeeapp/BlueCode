// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: hello.capnp

#ifndef CAPNP_INCLUDED_df3ba06abc2888c3_
#define CAPNP_INCLUDED_df3ba06abc2888c3_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "discovery.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f489a65181ad32c9);
CAPNP_DECLARE_SCHEMA(ca0f437a8bea2455);

}  // namespace schemas
}  // namespace capnp


struct HelloRequest {
  HelloRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f489a65181ad32c9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct HelloResponse {
  HelloResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca0f437a8bea2455, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class HelloRequest::Reader {
public:
  typedef HelloRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUuid() const;
  inline  ::capnp::Data::Reader getUuid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HelloRequest::Builder {
public:
  typedef HelloRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUuid();
  inline  ::capnp::Data::Builder getUuid();
  inline void setUuid( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initUuid(unsigned int size);
  inline void adoptUuid(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownUuid();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HelloRequest::Pipeline {
public:
  typedef HelloRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HelloResponse::Reader {
public:
  typedef HelloResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getDeviceId() const;

  inline bool hasDiscoveryResponse() const;
  inline  ::DiscoveryResponse::Reader getDiscoveryResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HelloResponse::Builder {
public:
  typedef HelloResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getDeviceId();
  inline void setDeviceId( ::int64_t value);

  inline bool hasDiscoveryResponse();
  inline  ::DiscoveryResponse::Builder getDiscoveryResponse();
  inline void setDiscoveryResponse( ::DiscoveryResponse::Reader value);
  inline  ::DiscoveryResponse::Builder initDiscoveryResponse();
  inline void adoptDiscoveryResponse(::capnp::Orphan< ::DiscoveryResponse>&& value);
  inline ::capnp::Orphan< ::DiscoveryResponse> disownDiscoveryResponse();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HelloResponse::Pipeline {
public:
  typedef HelloResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DiscoveryResponse::Pipeline getDiscoveryResponse();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool HelloRequest::Reader::hasUuid() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HelloRequest::Builder::hasUuid() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader HelloRequest::Reader::getUuid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder HelloRequest::Builder::getUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HelloRequest::Builder::setUuid( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder HelloRequest::Builder::initUuid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void HelloRequest::Builder::adoptUuid(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> HelloRequest::Builder::disownUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t HelloResponse::Reader::getDeviceId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t HelloResponse::Builder::getDeviceId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void HelloResponse::Builder::setDeviceId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool HelloResponse::Reader::hasDiscoveryResponse() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool HelloResponse::Builder::hasDiscoveryResponse() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::DiscoveryResponse::Reader HelloResponse::Reader::getDiscoveryResponse() const {
  return ::capnp::_::PointerHelpers< ::DiscoveryResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::DiscoveryResponse::Builder HelloResponse::Builder::getDiscoveryResponse() {
  return ::capnp::_::PointerHelpers< ::DiscoveryResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DiscoveryResponse::Pipeline HelloResponse::Pipeline::getDiscoveryResponse() {
  return  ::DiscoveryResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HelloResponse::Builder::setDiscoveryResponse( ::DiscoveryResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::DiscoveryResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::DiscoveryResponse::Builder HelloResponse::Builder::initDiscoveryResponse() {
  return ::capnp::_::PointerHelpers< ::DiscoveryResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void HelloResponse::Builder::adoptDiscoveryResponse(
    ::capnp::Orphan< ::DiscoveryResponse>&& value) {
  ::capnp::_::PointerHelpers< ::DiscoveryResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DiscoveryResponse> HelloResponse::Builder::disownDiscoveryResponse() {
  return ::capnp::_::PointerHelpers< ::DiscoveryResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_df3ba06abc2888c3_
