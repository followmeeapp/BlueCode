// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test_processes.capnp

#include "test_processes.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<38> b_dc0f1abc7ec48865 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101, 136, 196, 126, 188,  26,  15, 220,
     21,   0,   0,   0,   1,   0,   0,   0,
    204,  22,  66,   2, 240, 179, 236, 155,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  95, 112, 114, 111,
     99, 101, 115, 115, 101, 115,  46,  99,
     97, 112, 110, 112,  58,  84, 101, 115,
    116,  80, 114, 111,  99, 101, 115, 115,
    101, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 114, 118, 101, 114, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     60,  71,  63,  80,  46,  65, 141, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc0f1abc7ec48865 = b_dc0f1abc7ec48865.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dc0f1abc7ec48865[] = {
  &s_a98d412e503f473c,
};
static const uint16_t m_dc0f1abc7ec48865[] = {0};
static const uint16_t i_dc0f1abc7ec48865[] = {0};
const ::capnp::_::RawSchema s_dc0f1abc7ec48865 = {
  0xdc0f1abc7ec48865, b_dc0f1abc7ec48865.words, 38, d_dc0f1abc7ec48865, m_dc0f1abc7ec48865,
  1, 1, i_dc0f1abc7ec48865, nullptr, nullptr, { &s_dc0f1abc7ec48865, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<43> b_a98d412e503f473c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60,  71,  63,  80,  46,  65, 141, 169,
     21,   0,   0,   0,   1,   0,   1,   0,
    204,  22,  66,   2, 240, 179, 236, 155,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  95, 112, 114, 111,
     99, 101, 115, 115, 101, 115,  46,  99,
     97, 112, 110, 112,  58,  83, 101, 114,
    118, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    213, 211, 140,   0, 243, 113, 121, 167,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   1,   0,
     32,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 116, 116, 105, 110, 103, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 111,  99, 107,  82, 101, 103,
    105, 111, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a98d412e503f473c = b_a98d412e503f473c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a98d412e503f473c[] = {
  &s_a77971f3008cd3d5,
};
static const uint16_t m_a98d412e503f473c[] = {1, 0};
static const uint16_t i_a98d412e503f473c[] = {0, 1};
const ::capnp::_::RawSchema s_a98d412e503f473c = {
  0xa98d412e503f473c, b_a98d412e503f473c.words, 43, d_a98d412e503f473c, m_a98d412e503f473c,
  1, 2, i_a98d412e503f473c, nullptr, nullptr, { &s_a98d412e503f473c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<82> b_a77971f3008cd3d5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    213, 211, 140,   0, 243, 113, 121, 167,
     28,   0,   0,   0,   1,   0,   1,   0,
     60,  71,  63,  80,  46,  65, 141, 169,
      2,   0,   7,   0,   1,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  95, 112, 114, 111,
     99, 101, 115, 115, 101, 115,  46,  99,
     97, 112, 110, 112,  58,  83, 101, 114,
    118, 101, 114,  46, 115, 101, 116, 116,
    105, 110, 103, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 114, 118, 101, 114,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     39,  33,  31, 239, 161, 254,  93, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115,  99, 111, 118, 101, 114,
    121, 100,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    111, 139,  97, 242, 191,  94,   4, 246,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116,  76, 111, 103,
    103, 101, 114,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    194, 238, 154, 154, 194, 253, 229, 131,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 101, 115, 116,  72,
    105, 115, 116, 111, 103, 114,  97, 109,
    109, 101, 114,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    184,  22, 203,   7, 141,  36, 125, 193,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a77971f3008cd3d5 = b_a77971f3008cd3d5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a77971f3008cd3d5[] = {
  &s_83e5fdc29a9aeec2,
  &s_a98d412e503f473c,
  &s_bf5dfea1ef1f2127,
  &s_c17d248d07cb16b8,
  &s_f6045ebff2618b6f,
};
static const uint16_t m_a77971f3008cd3d5[] = {1, 2, 3, 0};
static const uint16_t i_a77971f3008cd3d5[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_a77971f3008cd3d5 = {
  0xa77971f3008cd3d5, b_a77971f3008cd3d5.words, 82, d_a77971f3008cd3d5, m_a77971f3008cd3d5,
  5, 4, i_a77971f3008cd3d5, nullptr, nullptr, { &s_a77971f3008cd3d5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// TestProcesses
constexpr uint16_t TestProcesses::_capnpPrivate::dataWordSize;
constexpr uint16_t TestProcesses::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestProcesses::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestProcesses::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* TestProcesses::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Server
constexpr uint16_t Server::_capnpPrivate::dataWordSize;
constexpr uint16_t Server::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Server::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Server::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Server::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Server::Settings
constexpr uint16_t Server::Settings::_capnpPrivate::dataWordSize;
constexpr uint16_t Server::Settings::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Server::Settings::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Server::Settings::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Server::Settings::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



