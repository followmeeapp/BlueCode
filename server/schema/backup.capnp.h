// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: backup.capnp

#ifndef CAPNP_INCLUDED_9be9b694bb54e540_
#define CAPNP_INCLUDED_9be9b694bb54e540_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c1f11213f800730d);
CAPNP_DECLARE_SCHEMA(c614a6e68f7dbf58);
CAPNP_DECLARE_SCHEMA(9f09967fec43bd05);
CAPNP_DECLARE_SCHEMA(ad5f27736fc8422f);
CAPNP_DECLARE_SCHEMA(b021dba3477202c6);
CAPNP_DECLARE_SCHEMA(e8c4d594d2e14e84);
CAPNP_DECLARE_SCHEMA(c19a02195ece6346);
CAPNP_DECLARE_SCHEMA(c260adac84c2a2f4);
CAPNP_DECLARE_SCHEMA(9ef00b17ac611dd1);

}  // namespace schemas
}  // namespace capnp


struct Backup {
  Backup() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1f11213f800730d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CreateBackupRequest {
  CreateBackupRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c614a6e68f7dbf58, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct BackupRequest {
  BackupRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f09967fec43bd05, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct BackupResponse {
  BackupResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad5f27736fc8422f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct BackupListRequest {
  BackupListRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b021dba3477202c6, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct BackupListResponse {
  BackupListResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8c4d594d2e14e84, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct BackupCard {
  BackupCard() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c19a02195ece6346, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ClientBackup {
  ClientBackup() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Kind;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c260adac84c2a2f4, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ClientBackup::Kind {
  Kind() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNKNOWN,
    BACKUP_CARD_LIST,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ef00b17ac611dd1, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Backup::Reader {
public:
  typedef Backup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Backup::Builder {
public:
  typedef Backup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Backup::Pipeline {
public:
  typedef Backup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CreateBackupRequest::Reader {
public:
  typedef CreateBackupRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getPreviousBackup() const;

  inline bool hasBackup() const;
  inline  ::Backup::Reader getBackup() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CreateBackupRequest::Builder {
public:
  typedef CreateBackupRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getPreviousBackup();
  inline void setPreviousBackup( ::int64_t value);

  inline bool hasBackup();
  inline  ::Backup::Builder getBackup();
  inline void setBackup( ::Backup::Reader value);
  inline  ::Backup::Builder initBackup();
  inline void adoptBackup(::capnp::Orphan< ::Backup>&& value);
  inline ::capnp::Orphan< ::Backup> disownBackup();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CreateBackupRequest::Pipeline {
public:
  typedef CreateBackupRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Backup::Pipeline getBackup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupRequest::Reader {
public:
  typedef BackupRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupRequest::Builder {
public:
  typedef BackupRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupRequest::Pipeline {
public:
  typedef BackupRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupResponse::Reader {
public:
  typedef BackupResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBackup() const;
  inline  ::Backup::Reader getBackup() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupResponse::Builder {
public:
  typedef BackupResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBackup();
  inline  ::Backup::Builder getBackup();
  inline void setBackup( ::Backup::Reader value);
  inline  ::Backup::Builder initBackup();
  inline void adoptBackup(::capnp::Orphan< ::Backup>&& value);
  inline ::capnp::Orphan< ::Backup> disownBackup();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupResponse::Pipeline {
public:
  typedef BackupResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Backup::Pipeline getBackup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupListRequest::Reader {
public:
  typedef BackupListRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupListRequest::Builder {
public:
  typedef BackupListRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupListRequest::Pipeline {
public:
  typedef BackupListRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupListResponse::Reader {
public:
  typedef BackupListResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBackups() const;
  inline  ::capnp::List< ::Backup>::Reader getBackups() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupListResponse::Builder {
public:
  typedef BackupListResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBackups();
  inline  ::capnp::List< ::Backup>::Builder getBackups();
  inline void setBackups( ::capnp::List< ::Backup>::Reader value);
  inline  ::capnp::List< ::Backup>::Builder initBackups(unsigned int size);
  inline void adoptBackups(::capnp::Orphan< ::capnp::List< ::Backup>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Backup>> disownBackups();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupListResponse::Pipeline {
public:
  typedef BackupListResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BackupCard::Reader {
public:
  typedef BackupCard Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId() const;

  inline  ::int64_t getTimestamp() const;

  inline bool hasFullName() const;
  inline  ::capnp::Text::Reader getFullName() const;

  inline bool hasLocation() const;
  inline  ::capnp::Text::Reader getLocation() const;

  inline bool getIsBLECard() const;

  inline bool getIsBlueCardLink() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BackupCard::Builder {
public:
  typedef BackupCard Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId();
  inline void setId( ::int64_t value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool hasFullName();
  inline  ::capnp::Text::Builder getFullName();
  inline void setFullName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFullName(unsigned int size);
  inline void adoptFullName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFullName();

  inline bool hasLocation();
  inline  ::capnp::Text::Builder getLocation();
  inline void setLocation( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLocation(unsigned int size);
  inline void adoptLocation(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLocation();

  inline bool getIsBLECard();
  inline void setIsBLECard(bool value);

  inline bool getIsBlueCardLink();
  inline void setIsBlueCardLink(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BackupCard::Pipeline {
public:
  typedef BackupCard Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ClientBackup::Reader {
public:
  typedef ClientBackup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

  inline typename Kind::Reader getKind() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ClientBackup::Builder {
public:
  typedef ClientBackup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline typename Kind::Builder getKind();
  inline typename Kind::Builder initKind();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ClientBackup::Pipeline {
public:
  typedef ClientBackup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Kind::Pipeline getKind();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ClientBackup::Kind::Reader {
public:
  typedef Kind Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool isBackupCardList() const;
  inline bool hasBackupCardList() const;
  inline  ::capnp::List< ::BackupCard>::Reader getBackupCardList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ClientBackup::Kind::Builder {
public:
  typedef Kind Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::VOID);

  inline bool isBackupCardList();
  inline bool hasBackupCardList();
  inline  ::capnp::List< ::BackupCard>::Builder getBackupCardList();
  inline void setBackupCardList( ::capnp::List< ::BackupCard>::Reader value);
  inline  ::capnp::List< ::BackupCard>::Builder initBackupCardList(unsigned int size);
  inline void adoptBackupCardList(::capnp::Orphan< ::capnp::List< ::BackupCard>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::BackupCard>> disownBackupCardList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ClientBackup::Kind::Pipeline {
public:
  typedef Kind Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int64_t Backup::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t Backup::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Backup::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Backup::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Backup::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Backup::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Backup::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Backup::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Backup::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Backup::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Backup::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t CreateBackupRequest::Reader::getPreviousBackup() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t CreateBackupRequest::Builder::getPreviousBackup() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void CreateBackupRequest::Builder::setPreviousBackup( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool CreateBackupRequest::Reader::hasBackup() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CreateBackupRequest::Builder::hasBackup() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Backup::Reader CreateBackupRequest::Reader::getBackup() const {
  return ::capnp::_::PointerHelpers< ::Backup>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Backup::Builder CreateBackupRequest::Builder::getBackup() {
  return ::capnp::_::PointerHelpers< ::Backup>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Backup::Pipeline CreateBackupRequest::Pipeline::getBackup() {
  return  ::Backup::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CreateBackupRequest::Builder::setBackup( ::Backup::Reader value) {
  ::capnp::_::PointerHelpers< ::Backup>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Backup::Builder CreateBackupRequest::Builder::initBackup() {
  return ::capnp::_::PointerHelpers< ::Backup>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CreateBackupRequest::Builder::adoptBackup(
    ::capnp::Orphan< ::Backup>&& value) {
  ::capnp::_::PointerHelpers< ::Backup>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Backup> CreateBackupRequest::Builder::disownBackup() {
  return ::capnp::_::PointerHelpers< ::Backup>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t BackupRequest::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t BackupRequest::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void BackupRequest::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool BackupResponse::Reader::hasBackup() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BackupResponse::Builder::hasBackup() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Backup::Reader BackupResponse::Reader::getBackup() const {
  return ::capnp::_::PointerHelpers< ::Backup>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Backup::Builder BackupResponse::Builder::getBackup() {
  return ::capnp::_::PointerHelpers< ::Backup>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Backup::Pipeline BackupResponse::Pipeline::getBackup() {
  return  ::Backup::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void BackupResponse::Builder::setBackup( ::Backup::Reader value) {
  ::capnp::_::PointerHelpers< ::Backup>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Backup::Builder BackupResponse::Builder::initBackup() {
  return ::capnp::_::PointerHelpers< ::Backup>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BackupResponse::Builder::adoptBackup(
    ::capnp::Orphan< ::Backup>&& value) {
  ::capnp::_::PointerHelpers< ::Backup>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Backup> BackupResponse::Builder::disownBackup() {
  return ::capnp::_::PointerHelpers< ::Backup>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool BackupListResponse::Reader::hasBackups() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BackupListResponse::Builder::hasBackups() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Backup>::Reader BackupListResponse::Reader::getBackups() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Backup>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Backup>::Builder BackupListResponse::Builder::getBackups() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Backup>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BackupListResponse::Builder::setBackups( ::capnp::List< ::Backup>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Backup>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Backup>::Builder BackupListResponse::Builder::initBackups(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Backup>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void BackupListResponse::Builder::adoptBackups(
    ::capnp::Orphan< ::capnp::List< ::Backup>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Backup>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Backup>> BackupListResponse::Builder::disownBackups() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Backup>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t BackupCard::Reader::getId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t BackupCard::Builder::getId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void BackupCard::Builder::setId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t BackupCard::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t BackupCard::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void BackupCard::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool BackupCard::Reader::hasFullName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BackupCard::Builder::hasFullName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupCard::Reader::getFullName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupCard::Builder::getFullName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BackupCard::Builder::setFullName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupCard::Builder::initFullName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void BackupCard::Builder::adoptFullName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupCard::Builder::disownFullName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool BackupCard::Reader::hasLocation() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool BackupCard::Builder::hasLocation() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BackupCard::Reader::getLocation() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BackupCard::Builder::getLocation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void BackupCard::Builder::setLocation( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BackupCard::Builder::initLocation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void BackupCard::Builder::adoptLocation(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BackupCard::Builder::disownLocation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool BackupCard::Reader::getIsBLECard() const {
  return _reader.getDataField<bool>(
      128 * ::capnp::ELEMENTS);
}

inline bool BackupCard::Builder::getIsBLECard() {
  return _builder.getDataField<bool>(
      128 * ::capnp::ELEMENTS);
}
inline void BackupCard::Builder::setIsBLECard(bool value) {
  _builder.setDataField<bool>(
      128 * ::capnp::ELEMENTS, value);
}

inline bool BackupCard::Reader::getIsBlueCardLink() const {
  return _reader.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}

inline bool BackupCard::Builder::getIsBlueCardLink() {
  return _builder.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}
inline void BackupCard::Builder::setIsBlueCardLink(bool value) {
  _builder.setDataField<bool>(
      129 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ClientBackup::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t ClientBackup::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ClientBackup::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline typename ClientBackup::Kind::Reader ClientBackup::Reader::getKind() const {
  return ClientBackup::Kind::Reader(_reader);
}
inline typename ClientBackup::Kind::Builder ClientBackup::Builder::getKind() {
  return ClientBackup::Kind::Builder(_builder);
}
#if !CAPNP_LITE
inline typename ClientBackup::Kind::Pipeline ClientBackup::Pipeline::getKind() {
  return ClientBackup::Kind::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename ClientBackup::Kind::Builder ClientBackup::Builder::initKind() {
  _builder.setDataField< ::uint16_t>(4 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return ClientBackup::Kind::Builder(_builder);
}
inline  ::ClientBackup::Kind::Which ClientBackup::Kind::Reader::which() const {
  return _reader.getDataField<Which>(4 * ::capnp::ELEMENTS);
}
inline  ::ClientBackup::Kind::Which ClientBackup::Kind::Builder::which() {
  return _builder.getDataField<Which>(4 * ::capnp::ELEMENTS);
}

inline bool ClientBackup::Kind::Reader::isUnknown() const {
  return which() == ClientBackup::Kind::UNKNOWN;
}
inline bool ClientBackup::Kind::Builder::isUnknown() {
  return which() == ClientBackup::Kind::UNKNOWN;
}
inline  ::capnp::Void ClientBackup::Kind::Reader::getUnknown() const {
  KJ_IREQUIRE((which() == ClientBackup::Kind::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ClientBackup::Kind::Builder::getUnknown() {
  KJ_IREQUIRE((which() == ClientBackup::Kind::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ClientBackup::Kind::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<ClientBackup::Kind::Which>(
      4 * ::capnp::ELEMENTS, ClientBackup::Kind::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ClientBackup::Kind::Reader::isBackupCardList() const {
  return which() == ClientBackup::Kind::BACKUP_CARD_LIST;
}
inline bool ClientBackup::Kind::Builder::isBackupCardList() {
  return which() == ClientBackup::Kind::BACKUP_CARD_LIST;
}
inline bool ClientBackup::Kind::Reader::hasBackupCardList() const {
  if (which() != ClientBackup::Kind::BACKUP_CARD_LIST) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ClientBackup::Kind::Builder::hasBackupCardList() {
  if (which() != ClientBackup::Kind::BACKUP_CARD_LIST) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::BackupCard>::Reader ClientBackup::Kind::Reader::getBackupCardList() const {
  KJ_IREQUIRE((which() == ClientBackup::Kind::BACKUP_CARD_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BackupCard>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::BackupCard>::Builder ClientBackup::Kind::Builder::getBackupCardList() {
  KJ_IREQUIRE((which() == ClientBackup::Kind::BACKUP_CARD_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BackupCard>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ClientBackup::Kind::Builder::setBackupCardList( ::capnp::List< ::BackupCard>::Reader value) {
  _builder.setDataField<ClientBackup::Kind::Which>(
      4 * ::capnp::ELEMENTS, ClientBackup::Kind::BACKUP_CARD_LIST);
  ::capnp::_::PointerHelpers< ::capnp::List< ::BackupCard>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::BackupCard>::Builder ClientBackup::Kind::Builder::initBackupCardList(unsigned int size) {
  _builder.setDataField<ClientBackup::Kind::Which>(
      4 * ::capnp::ELEMENTS, ClientBackup::Kind::BACKUP_CARD_LIST);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BackupCard>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ClientBackup::Kind::Builder::adoptBackupCardList(
    ::capnp::Orphan< ::capnp::List< ::BackupCard>>&& value) {
  _builder.setDataField<ClientBackup::Kind::Which>(
      4 * ::capnp::ELEMENTS, ClientBackup::Kind::BACKUP_CARD_LIST);
  ::capnp::_::PointerHelpers< ::capnp::List< ::BackupCard>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::BackupCard>> ClientBackup::Kind::Builder::disownBackupCardList() {
  KJ_IREQUIRE((which() == ClientBackup::Kind::BACKUP_CARD_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::BackupCard>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_9be9b694bb54e540_
