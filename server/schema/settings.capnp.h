// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: settings.capnp

#ifndef CAPNP_INCLUDED_cd64c162aea242f4_
#define CAPNP_INCLUDED_cd64c162aea242f4_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(bf5dfea1ef1f2127);
CAPNP_DECLARE_SCHEMA(f6045ebff2618b6f);
CAPNP_DECLARE_SCHEMA(83e5fdc29a9aeec2);
CAPNP_DECLARE_SCHEMA(c17d248d07cb16b8);

}  // namespace schemas
}  // namespace capnp


struct ServerSettings {
  ServerSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf5dfea1ef1f2127, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoverydSettings {
  DiscoverydSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f6045ebff2618b6f, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EventLoggerSettings {
  EventLoggerSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(83e5fdc29a9aeec2, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RequestHistogrammerSettings {
  RequestHistogrammerSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c17d248d07cb16b8, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ServerSettings::Reader {
public:
  typedef ServerSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDirPrefix() const;
  inline  ::capnp::Text::Reader getDirPrefix() const;

  inline  ::int32_t getFragmentCountLimit() const;

  inline bool hasServerChannel() const;
  inline  ::capnp::Text::Reader getServerChannel() const;

  inline  ::int32_t getServerStreamId() const;

  inline bool hasEngineChannel() const;
  inline  ::capnp::Text::Reader getEngineChannel() const;

  inline  ::int32_t getEngineStreamId() const;

  inline bool hasTraceChannel() const;
  inline  ::capnp::Text::Reader getTraceChannel() const;

  inline  ::int32_t getTraceStreamId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServerSettings::Builder {
public:
  typedef ServerSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDirPrefix();
  inline  ::capnp::Text::Builder getDirPrefix();
  inline void setDirPrefix( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDirPrefix(unsigned int size);
  inline void adoptDirPrefix(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDirPrefix();

  inline  ::int32_t getFragmentCountLimit();
  inline void setFragmentCountLimit( ::int32_t value);

  inline bool hasServerChannel();
  inline  ::capnp::Text::Builder getServerChannel();
  inline void setServerChannel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initServerChannel(unsigned int size);
  inline void adoptServerChannel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownServerChannel();

  inline  ::int32_t getServerStreamId();
  inline void setServerStreamId( ::int32_t value);

  inline bool hasEngineChannel();
  inline  ::capnp::Text::Builder getEngineChannel();
  inline void setEngineChannel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEngineChannel(unsigned int size);
  inline void adoptEngineChannel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEngineChannel();

  inline  ::int32_t getEngineStreamId();
  inline void setEngineStreamId( ::int32_t value);

  inline bool hasTraceChannel();
  inline  ::capnp::Text::Builder getTraceChannel();
  inline void setTraceChannel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTraceChannel(unsigned int size);
  inline void adoptTraceChannel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTraceChannel();

  inline  ::int32_t getTraceStreamId();
  inline void setTraceStreamId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServerSettings::Pipeline {
public:
  typedef ServerSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoverydSettings::Reader {
public:
  typedef DiscoverydSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDbPath() const;
  inline  ::capnp::Text::Reader getDbPath() const;

  inline  ::int32_t getDbSize() const;

  inline bool hasDirPrefix() const;
  inline  ::capnp::Text::Reader getDirPrefix() const;

  inline  ::int32_t getFragmentCountLimit() const;

  inline bool hasServerChannel() const;
  inline  ::capnp::Text::Reader getServerChannel() const;

  inline  ::int32_t getServerStreamId() const;

  inline bool hasEngineChannel() const;
  inline  ::capnp::Text::Reader getEngineChannel() const;

  inline  ::int32_t getEngineStreamId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoverydSettings::Builder {
public:
  typedef DiscoverydSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDbPath();
  inline  ::capnp::Text::Builder getDbPath();
  inline void setDbPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDbPath(unsigned int size);
  inline void adoptDbPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDbPath();

  inline  ::int32_t getDbSize();
  inline void setDbSize( ::int32_t value);

  inline bool hasDirPrefix();
  inline  ::capnp::Text::Builder getDirPrefix();
  inline void setDirPrefix( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDirPrefix(unsigned int size);
  inline void adoptDirPrefix(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDirPrefix();

  inline  ::int32_t getFragmentCountLimit();
  inline void setFragmentCountLimit( ::int32_t value);

  inline bool hasServerChannel();
  inline  ::capnp::Text::Builder getServerChannel();
  inline void setServerChannel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initServerChannel(unsigned int size);
  inline void adoptServerChannel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownServerChannel();

  inline  ::int32_t getServerStreamId();
  inline void setServerStreamId( ::int32_t value);

  inline bool hasEngineChannel();
  inline  ::capnp::Text::Builder getEngineChannel();
  inline void setEngineChannel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEngineChannel(unsigned int size);
  inline void adoptEngineChannel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEngineChannel();

  inline  ::int32_t getEngineStreamId();
  inline void setEngineStreamId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoverydSettings::Pipeline {
public:
  typedef DiscoverydSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventLoggerSettings::Reader {
public:
  typedef EventLoggerSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDbPath() const;
  inline  ::capnp::Text::Reader getDbPath() const;

  inline  ::int32_t getMetaDBSize() const;

  inline bool hasDirPrefix() const;
  inline  ::capnp::Text::Reader getDirPrefix() const;

  inline  ::int32_t getFragmentCountLimit() const;

  inline bool hasServerChannel() const;
  inline  ::capnp::Text::Reader getServerChannel() const;

  inline  ::int32_t getServerStreamId() const;

  inline bool hasLoggerChannel() const;
  inline  ::capnp::Text::Reader getLoggerChannel() const;

  inline  ::int32_t getLoggerStreamId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventLoggerSettings::Builder {
public:
  typedef EventLoggerSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDbPath();
  inline  ::capnp::Text::Builder getDbPath();
  inline void setDbPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDbPath(unsigned int size);
  inline void adoptDbPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDbPath();

  inline  ::int32_t getMetaDBSize();
  inline void setMetaDBSize( ::int32_t value);

  inline bool hasDirPrefix();
  inline  ::capnp::Text::Builder getDirPrefix();
  inline void setDirPrefix( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDirPrefix(unsigned int size);
  inline void adoptDirPrefix(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDirPrefix();

  inline  ::int32_t getFragmentCountLimit();
  inline void setFragmentCountLimit( ::int32_t value);

  inline bool hasServerChannel();
  inline  ::capnp::Text::Builder getServerChannel();
  inline void setServerChannel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initServerChannel(unsigned int size);
  inline void adoptServerChannel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownServerChannel();

  inline  ::int32_t getServerStreamId();
  inline void setServerStreamId( ::int32_t value);

  inline bool hasLoggerChannel();
  inline  ::capnp::Text::Builder getLoggerChannel();
  inline void setLoggerChannel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLoggerChannel(unsigned int size);
  inline void adoptLoggerChannel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLoggerChannel();

  inline  ::int32_t getLoggerStreamId();
  inline void setLoggerStreamId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventLoggerSettings::Pipeline {
public:
  typedef EventLoggerSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RequestHistogrammerSettings::Reader {
public:
  typedef RequestHistogrammerSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDbPath() const;
  inline  ::capnp::Text::Reader getDbPath() const;

  inline  ::int32_t getMetaDBSize() const;

  inline  ::int32_t getHistDBSize() const;

  inline  ::int32_t getMaxHistVal() const;

  inline  ::int32_t getLowerInterval() const;

  inline  ::int32_t getUpperInterval() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RequestHistogrammerSettings::Builder {
public:
  typedef RequestHistogrammerSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDbPath();
  inline  ::capnp::Text::Builder getDbPath();
  inline void setDbPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDbPath(unsigned int size);
  inline void adoptDbPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDbPath();

  inline  ::int32_t getMetaDBSize();
  inline void setMetaDBSize( ::int32_t value);

  inline  ::int32_t getHistDBSize();
  inline void setHistDBSize( ::int32_t value);

  inline  ::int32_t getMaxHistVal();
  inline void setMaxHistVal( ::int32_t value);

  inline  ::int32_t getLowerInterval();
  inline void setLowerInterval( ::int32_t value);

  inline  ::int32_t getUpperInterval();
  inline void setUpperInterval( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RequestHistogrammerSettings::Pipeline {
public:
  typedef RequestHistogrammerSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ServerSettings::Reader::hasDirPrefix() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ServerSettings::Builder::hasDirPrefix() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ServerSettings::Reader::getDirPrefix() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ServerSettings::Builder::getDirPrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ServerSettings::Builder::setDirPrefix( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ServerSettings::Builder::initDirPrefix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ServerSettings::Builder::adoptDirPrefix(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ServerSettings::Builder::disownDirPrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int32_t ServerSettings::Reader::getFragmentCountLimit() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t ServerSettings::Builder::getFragmentCountLimit() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ServerSettings::Builder::setFragmentCountLimit( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ServerSettings::Reader::hasServerChannel() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ServerSettings::Builder::hasServerChannel() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ServerSettings::Reader::getServerChannel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ServerSettings::Builder::getServerChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ServerSettings::Builder::setServerChannel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ServerSettings::Builder::initServerChannel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ServerSettings::Builder::adoptServerChannel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ServerSettings::Builder::disownServerChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t ServerSettings::Reader::getServerStreamId() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t ServerSettings::Builder::getServerStreamId() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ServerSettings::Builder::setServerStreamId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ServerSettings::Reader::hasEngineChannel() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ServerSettings::Builder::hasEngineChannel() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ServerSettings::Reader::getEngineChannel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ServerSettings::Builder::getEngineChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ServerSettings::Builder::setEngineChannel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ServerSettings::Builder::initEngineChannel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ServerSettings::Builder::adoptEngineChannel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ServerSettings::Builder::disownEngineChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int32_t ServerSettings::Reader::getEngineStreamId() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t ServerSettings::Builder::getEngineStreamId() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void ServerSettings::Builder::setEngineStreamId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool ServerSettings::Reader::hasTraceChannel() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool ServerSettings::Builder::hasTraceChannel() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ServerSettings::Reader::getTraceChannel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ServerSettings::Builder::getTraceChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void ServerSettings::Builder::setTraceChannel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ServerSettings::Builder::initTraceChannel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void ServerSettings::Builder::adoptTraceChannel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ServerSettings::Builder::disownTraceChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::int32_t ServerSettings::Reader::getTraceStreamId() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t ServerSettings::Builder::getTraceStreamId() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void ServerSettings::Builder::setTraceStreamId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool DiscoverydSettings::Reader::hasDbPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverydSettings::Builder::hasDbPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DiscoverydSettings::Reader::getDbPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DiscoverydSettings::Builder::getDbPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoverydSettings::Builder::setDbPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DiscoverydSettings::Builder::initDbPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DiscoverydSettings::Builder::adoptDbPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DiscoverydSettings::Builder::disownDbPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int32_t DiscoverydSettings::Reader::getDbSize() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t DiscoverydSettings::Builder::getDbSize() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DiscoverydSettings::Builder::setDbSize( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DiscoverydSettings::Reader::hasDirPrefix() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverydSettings::Builder::hasDirPrefix() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DiscoverydSettings::Reader::getDirPrefix() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DiscoverydSettings::Builder::getDirPrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DiscoverydSettings::Builder::setDirPrefix( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DiscoverydSettings::Builder::initDirPrefix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DiscoverydSettings::Builder::adoptDirPrefix(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DiscoverydSettings::Builder::disownDirPrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t DiscoverydSettings::Reader::getFragmentCountLimit() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t DiscoverydSettings::Builder::getFragmentCountLimit() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void DiscoverydSettings::Builder::setFragmentCountLimit( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool DiscoverydSettings::Reader::hasServerChannel() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverydSettings::Builder::hasServerChannel() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DiscoverydSettings::Reader::getServerChannel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DiscoverydSettings::Builder::getServerChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void DiscoverydSettings::Builder::setServerChannel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DiscoverydSettings::Builder::initServerChannel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void DiscoverydSettings::Builder::adoptServerChannel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DiscoverydSettings::Builder::disownServerChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int32_t DiscoverydSettings::Reader::getServerStreamId() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t DiscoverydSettings::Builder::getServerStreamId() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void DiscoverydSettings::Builder::setServerStreamId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool DiscoverydSettings::Reader::hasEngineChannel() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverydSettings::Builder::hasEngineChannel() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DiscoverydSettings::Reader::getEngineChannel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DiscoverydSettings::Builder::getEngineChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void DiscoverydSettings::Builder::setEngineChannel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DiscoverydSettings::Builder::initEngineChannel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void DiscoverydSettings::Builder::adoptEngineChannel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DiscoverydSettings::Builder::disownEngineChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::int32_t DiscoverydSettings::Reader::getEngineStreamId() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t DiscoverydSettings::Builder::getEngineStreamId() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void DiscoverydSettings::Builder::setEngineStreamId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool EventLoggerSettings::Reader::hasDbPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EventLoggerSettings::Builder::hasDbPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EventLoggerSettings::Reader::getDbPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EventLoggerSettings::Builder::getDbPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EventLoggerSettings::Builder::setDbPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EventLoggerSettings::Builder::initDbPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void EventLoggerSettings::Builder::adoptDbPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EventLoggerSettings::Builder::disownDbPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int32_t EventLoggerSettings::Reader::getMetaDBSize() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t EventLoggerSettings::Builder::getMetaDBSize() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void EventLoggerSettings::Builder::setMetaDBSize( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool EventLoggerSettings::Reader::hasDirPrefix() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool EventLoggerSettings::Builder::hasDirPrefix() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EventLoggerSettings::Reader::getDirPrefix() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EventLoggerSettings::Builder::getDirPrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void EventLoggerSettings::Builder::setDirPrefix( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EventLoggerSettings::Builder::initDirPrefix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void EventLoggerSettings::Builder::adoptDirPrefix(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EventLoggerSettings::Builder::disownDirPrefix() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t EventLoggerSettings::Reader::getFragmentCountLimit() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t EventLoggerSettings::Builder::getFragmentCountLimit() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void EventLoggerSettings::Builder::setFragmentCountLimit( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool EventLoggerSettings::Reader::hasServerChannel() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool EventLoggerSettings::Builder::hasServerChannel() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EventLoggerSettings::Reader::getServerChannel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EventLoggerSettings::Builder::getServerChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void EventLoggerSettings::Builder::setServerChannel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EventLoggerSettings::Builder::initServerChannel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void EventLoggerSettings::Builder::adoptServerChannel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EventLoggerSettings::Builder::disownServerChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int32_t EventLoggerSettings::Reader::getServerStreamId() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t EventLoggerSettings::Builder::getServerStreamId() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void EventLoggerSettings::Builder::setServerStreamId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool EventLoggerSettings::Reader::hasLoggerChannel() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool EventLoggerSettings::Builder::hasLoggerChannel() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EventLoggerSettings::Reader::getLoggerChannel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EventLoggerSettings::Builder::getLoggerChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void EventLoggerSettings::Builder::setLoggerChannel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EventLoggerSettings::Builder::initLoggerChannel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void EventLoggerSettings::Builder::adoptLoggerChannel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EventLoggerSettings::Builder::disownLoggerChannel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::int32_t EventLoggerSettings::Reader::getLoggerStreamId() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t EventLoggerSettings::Builder::getLoggerStreamId() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void EventLoggerSettings::Builder::setLoggerStreamId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool RequestHistogrammerSettings::Reader::hasDbPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RequestHistogrammerSettings::Builder::hasDbPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RequestHistogrammerSettings::Reader::getDbPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RequestHistogrammerSettings::Builder::getDbPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RequestHistogrammerSettings::Builder::setDbPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RequestHistogrammerSettings::Builder::initDbPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void RequestHistogrammerSettings::Builder::adoptDbPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RequestHistogrammerSettings::Builder::disownDbPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int32_t RequestHistogrammerSettings::Reader::getMetaDBSize() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t RequestHistogrammerSettings::Builder::getMetaDBSize() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void RequestHistogrammerSettings::Builder::setMetaDBSize( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RequestHistogrammerSettings::Reader::getHistDBSize() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t RequestHistogrammerSettings::Builder::getHistDBSize() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void RequestHistogrammerSettings::Builder::setHistDBSize( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RequestHistogrammerSettings::Reader::getMaxHistVal() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t RequestHistogrammerSettings::Builder::getMaxHistVal() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void RequestHistogrammerSettings::Builder::setMaxHistVal( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RequestHistogrammerSettings::Reader::getLowerInterval() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t RequestHistogrammerSettings::Builder::getLowerInterval() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void RequestHistogrammerSettings::Builder::setLowerInterval( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RequestHistogrammerSettings::Reader::getUpperInterval() const {
  return _reader.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int32_t RequestHistogrammerSettings::Builder::getUpperInterval() {
  return _builder.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void RequestHistogrammerSettings::Builder::setUpperInterval( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_cd64c162aea242f4_
