// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: discover_info.capnp

#ifndef CAPNP_INCLUDED_fa17781cc7ab2fdc_
#define CAPNP_INCLUDED_fa17781cc7ab2fdc_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d0b90f05e30ebe19);
CAPNP_DECLARE_SCHEMA(c114401abd3c6895);
enum class Type_c114401abd3c6895: uint16_t {
  UNKNOWN,
  DISCOVER,
  DEACTIVATE_DEVICE,
};
CAPNP_DECLARE_ENUM(Type, c114401abd3c6895);

}  // namespace schemas
}  // namespace capnp


struct DiscoverInfo {
  DiscoverInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_c114401abd3c6895 Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0b90f05e30ebe19, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class DiscoverInfo::Reader {
public:
  typedef DiscoverInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getRequestId() const;

  inline  ::DiscoverInfo::Type getType() const;

  inline bool getShouldSuppressSectionCreation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoverInfo::Builder {
public:
  typedef DiscoverInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getRequestId();
  inline void setRequestId( ::int64_t value);

  inline  ::DiscoverInfo::Type getType();
  inline void setType( ::DiscoverInfo::Type value);

  inline bool getShouldSuppressSectionCreation();
  inline void setShouldSuppressSectionCreation(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoverInfo::Pipeline {
public:
  typedef DiscoverInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int64_t DiscoverInfo::Reader::getRequestId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t DiscoverInfo::Builder::getRequestId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DiscoverInfo::Builder::setRequestId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::DiscoverInfo::Type DiscoverInfo::Reader::getType() const {
  return _reader.getDataField< ::DiscoverInfo::Type>(
      4 * ::capnp::ELEMENTS);
}

inline  ::DiscoverInfo::Type DiscoverInfo::Builder::getType() {
  return _builder.getDataField< ::DiscoverInfo::Type>(
      4 * ::capnp::ELEMENTS);
}
inline void DiscoverInfo::Builder::setType( ::DiscoverInfo::Type value) {
  _builder.setDataField< ::DiscoverInfo::Type>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool DiscoverInfo::Reader::getShouldSuppressSectionCreation() const {
  return _reader.getDataField<bool>(
      80 * ::capnp::ELEMENTS);
}

inline bool DiscoverInfo::Builder::getShouldSuppressSectionCreation() {
  return _builder.getDataField<bool>(
      80 * ::capnp::ELEMENTS);
}
inline void DiscoverInfo::Builder::setShouldSuppressSectionCreation(bool value) {
  _builder.setDataField<bool>(
      80 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_fa17781cc7ab2fdc_
