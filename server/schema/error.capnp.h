// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: error.capnp

#ifndef CAPNP_INCLUDED_db148e0707c7dfa7_
#define CAPNP_INCLUDED_db148e0707c7dfa7_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ebef82fe95bd560d);
CAPNP_DECLARE_SCHEMA(a27b869a5b685296);
enum class Code_a27b869a5b685296: uint16_t {
  UNKNOWN,
  DISCOVERY_NOT_AVAILABLE,
  LAST_DISCOVERY_NOT_APPLIED,
  PREVIOUS_BACKUP_NOT_APPLIED,
};
CAPNP_DECLARE_ENUM(Code, a27b869a5b685296);

}  // namespace schemas
}  // namespace capnp


struct ErrorResponse {
  ErrorResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Code_a27b869a5b685296 Code;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebef82fe95bd560d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ErrorResponse::Reader {
public:
  typedef ErrorResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::ErrorResponse::Code getCode() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ErrorResponse::Builder {
public:
  typedef ErrorResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ErrorResponse::Code getCode();
  inline void setCode( ::ErrorResponse::Code value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ErrorResponse::Pipeline {
public:
  typedef ErrorResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::ErrorResponse::Code ErrorResponse::Reader::getCode() const {
  return _reader.getDataField< ::ErrorResponse::Code>(
      0 * ::capnp::ELEMENTS);
}

inline  ::ErrorResponse::Code ErrorResponse::Builder::getCode() {
  return _builder.getDataField< ::ErrorResponse::Code>(
      0 * ::capnp::ELEMENTS);
}
inline void ErrorResponse::Builder::setCode( ::ErrorResponse::Code value) {
  _builder.setDataField< ::ErrorResponse::Code>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ErrorResponse::Reader::hasMessage() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ErrorResponse::Builder::hasMessage() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ErrorResponse::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ErrorResponse::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ErrorResponse::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ErrorResponse::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ErrorResponse::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ErrorResponse::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_db148e0707c7dfa7_
