// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test_processes.capnp

#ifndef CAPNP_INCLUDED_9becb3f0024216cc_
#define CAPNP_INCLUDED_9becb3f0024216cc_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "settings.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(dc0f1abc7ec48865);
CAPNP_DECLARE_SCHEMA(a98d412e503f473c);
CAPNP_DECLARE_SCHEMA(a77971f3008cd3d5);

}  // namespace schemas
}  // namespace capnp


struct TestProcesses {
  TestProcesses() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc0f1abc7ec48865, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Server {
  Server() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Settings;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a98d412e503f473c, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Server::Settings {
  Settings() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    SERVER,
    DISCOVERYD,
    EVENT_LOGGER,
    REQUEST_HISTOGRAMMER,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a77971f3008cd3d5, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TestProcesses::Reader {
public:
  typedef TestProcesses Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasServers() const;
  inline  ::capnp::List< ::Server>::Reader getServers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestProcesses::Builder {
public:
  typedef TestProcesses Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasServers();
  inline  ::capnp::List< ::Server>::Builder getServers();
  inline void setServers( ::capnp::List< ::Server>::Reader value);
  inline  ::capnp::List< ::Server>::Builder initServers(unsigned int size);
  inline void adoptServers(::capnp::Orphan< ::capnp::List< ::Server>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Server>> disownServers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestProcesses::Pipeline {
public:
  typedef TestProcesses Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Server::Reader {
public:
  typedef Server Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline typename Settings::Reader getSettings() const;

  inline bool hasClockRegion() const;
  inline  ::capnp::Text::Reader getClockRegion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Server::Builder {
public:
  typedef Server Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Settings::Builder getSettings();
  inline typename Settings::Builder initSettings();

  inline bool hasClockRegion();
  inline  ::capnp::Text::Builder getClockRegion();
  inline void setClockRegion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initClockRegion(unsigned int size);
  inline void adoptClockRegion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownClockRegion();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Server::Pipeline {
public:
  typedef Server Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Settings::Pipeline getSettings();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Server::Settings::Reader {
public:
  typedef Settings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isServer() const;
  inline bool hasServer() const;
  inline  ::ServerSettings::Reader getServer() const;

  inline bool isDiscoveryd() const;
  inline bool hasDiscoveryd() const;
  inline  ::DiscoverydSettings::Reader getDiscoveryd() const;

  inline bool isEventLogger() const;
  inline bool hasEventLogger() const;
  inline  ::EventLoggerSettings::Reader getEventLogger() const;

  inline bool isRequestHistogrammer() const;
  inline bool hasRequestHistogrammer() const;
  inline  ::RequestHistogrammerSettings::Reader getRequestHistogrammer() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Server::Settings::Builder {
public:
  typedef Settings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isServer();
  inline bool hasServer();
  inline  ::ServerSettings::Builder getServer();
  inline void setServer( ::ServerSettings::Reader value);
  inline  ::ServerSettings::Builder initServer();
  inline void adoptServer(::capnp::Orphan< ::ServerSettings>&& value);
  inline ::capnp::Orphan< ::ServerSettings> disownServer();

  inline bool isDiscoveryd();
  inline bool hasDiscoveryd();
  inline  ::DiscoverydSettings::Builder getDiscoveryd();
  inline void setDiscoveryd( ::DiscoverydSettings::Reader value);
  inline  ::DiscoverydSettings::Builder initDiscoveryd();
  inline void adoptDiscoveryd(::capnp::Orphan< ::DiscoverydSettings>&& value);
  inline ::capnp::Orphan< ::DiscoverydSettings> disownDiscoveryd();

  inline bool isEventLogger();
  inline bool hasEventLogger();
  inline  ::EventLoggerSettings::Builder getEventLogger();
  inline void setEventLogger( ::EventLoggerSettings::Reader value);
  inline  ::EventLoggerSettings::Builder initEventLogger();
  inline void adoptEventLogger(::capnp::Orphan< ::EventLoggerSettings>&& value);
  inline ::capnp::Orphan< ::EventLoggerSettings> disownEventLogger();

  inline bool isRequestHistogrammer();
  inline bool hasRequestHistogrammer();
  inline  ::RequestHistogrammerSettings::Builder getRequestHistogrammer();
  inline void setRequestHistogrammer( ::RequestHistogrammerSettings::Reader value);
  inline  ::RequestHistogrammerSettings::Builder initRequestHistogrammer();
  inline void adoptRequestHistogrammer(::capnp::Orphan< ::RequestHistogrammerSettings>&& value);
  inline ::capnp::Orphan< ::RequestHistogrammerSettings> disownRequestHistogrammer();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Server::Settings::Pipeline {
public:
  typedef Settings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool TestProcesses::Reader::hasServers() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TestProcesses::Builder::hasServers() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Server>::Reader TestProcesses::Reader::getServers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Server>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Server>::Builder TestProcesses::Builder::getServers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Server>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TestProcesses::Builder::setServers( ::capnp::List< ::Server>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Server>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Server>::Builder TestProcesses::Builder::initServers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Server>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void TestProcesses::Builder::adoptServers(
    ::capnp::Orphan< ::capnp::List< ::Server>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Server>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Server>> TestProcesses::Builder::disownServers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Server>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline typename Server::Settings::Reader Server::Reader::getSettings() const {
  return Server::Settings::Reader(_reader);
}
inline typename Server::Settings::Builder Server::Builder::getSettings() {
  return Server::Settings::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Server::Settings::Pipeline Server::Pipeline::getSettings() {
  return Server::Settings::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Server::Settings::Builder Server::Builder::initSettings() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return Server::Settings::Builder(_builder);
}
inline bool Server::Reader::hasClockRegion() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Server::Builder::hasClockRegion() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Server::Reader::getClockRegion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Server::Builder::getClockRegion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Server::Builder::setClockRegion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Server::Builder::initClockRegion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Server::Builder::adoptClockRegion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Server::Builder::disownClockRegion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::Server::Settings::Which Server::Settings::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::Server::Settings::Which Server::Settings::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Server::Settings::Reader::isServer() const {
  return which() == Server::Settings::SERVER;
}
inline bool Server::Settings::Builder::isServer() {
  return which() == Server::Settings::SERVER;
}
inline bool Server::Settings::Reader::hasServer() const {
  if (which() != Server::Settings::SERVER) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Server::Settings::Builder::hasServer() {
  if (which() != Server::Settings::SERVER) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ServerSettings::Reader Server::Settings::Reader::getServer() const {
  KJ_IREQUIRE((which() == Server::Settings::SERVER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServerSettings>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ServerSettings::Builder Server::Settings::Builder::getServer() {
  KJ_IREQUIRE((which() == Server::Settings::SERVER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServerSettings>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Server::Settings::Builder::setServer( ::ServerSettings::Reader value) {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::SERVER);
  ::capnp::_::PointerHelpers< ::ServerSettings>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ServerSettings::Builder Server::Settings::Builder::initServer() {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::SERVER);
  return ::capnp::_::PointerHelpers< ::ServerSettings>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Server::Settings::Builder::adoptServer(
    ::capnp::Orphan< ::ServerSettings>&& value) {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::SERVER);
  ::capnp::_::PointerHelpers< ::ServerSettings>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ServerSettings> Server::Settings::Builder::disownServer() {
  KJ_IREQUIRE((which() == Server::Settings::SERVER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServerSettings>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Server::Settings::Reader::isDiscoveryd() const {
  return which() == Server::Settings::DISCOVERYD;
}
inline bool Server::Settings::Builder::isDiscoveryd() {
  return which() == Server::Settings::DISCOVERYD;
}
inline bool Server::Settings::Reader::hasDiscoveryd() const {
  if (which() != Server::Settings::DISCOVERYD) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Server::Settings::Builder::hasDiscoveryd() {
  if (which() != Server::Settings::DISCOVERYD) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::DiscoverydSettings::Reader Server::Settings::Reader::getDiscoveryd() const {
  KJ_IREQUIRE((which() == Server::Settings::DISCOVERYD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverydSettings>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::DiscoverydSettings::Builder Server::Settings::Builder::getDiscoveryd() {
  KJ_IREQUIRE((which() == Server::Settings::DISCOVERYD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverydSettings>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Server::Settings::Builder::setDiscoveryd( ::DiscoverydSettings::Reader value) {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::DISCOVERYD);
  ::capnp::_::PointerHelpers< ::DiscoverydSettings>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::DiscoverydSettings::Builder Server::Settings::Builder::initDiscoveryd() {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::DISCOVERYD);
  return ::capnp::_::PointerHelpers< ::DiscoverydSettings>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Server::Settings::Builder::adoptDiscoveryd(
    ::capnp::Orphan< ::DiscoverydSettings>&& value) {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::DISCOVERYD);
  ::capnp::_::PointerHelpers< ::DiscoverydSettings>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DiscoverydSettings> Server::Settings::Builder::disownDiscoveryd() {
  KJ_IREQUIRE((which() == Server::Settings::DISCOVERYD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverydSettings>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Server::Settings::Reader::isEventLogger() const {
  return which() == Server::Settings::EVENT_LOGGER;
}
inline bool Server::Settings::Builder::isEventLogger() {
  return which() == Server::Settings::EVENT_LOGGER;
}
inline bool Server::Settings::Reader::hasEventLogger() const {
  if (which() != Server::Settings::EVENT_LOGGER) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Server::Settings::Builder::hasEventLogger() {
  if (which() != Server::Settings::EVENT_LOGGER) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::EventLoggerSettings::Reader Server::Settings::Reader::getEventLogger() const {
  KJ_IREQUIRE((which() == Server::Settings::EVENT_LOGGER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::EventLoggerSettings>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::EventLoggerSettings::Builder Server::Settings::Builder::getEventLogger() {
  KJ_IREQUIRE((which() == Server::Settings::EVENT_LOGGER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::EventLoggerSettings>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Server::Settings::Builder::setEventLogger( ::EventLoggerSettings::Reader value) {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::EVENT_LOGGER);
  ::capnp::_::PointerHelpers< ::EventLoggerSettings>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::EventLoggerSettings::Builder Server::Settings::Builder::initEventLogger() {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::EVENT_LOGGER);
  return ::capnp::_::PointerHelpers< ::EventLoggerSettings>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Server::Settings::Builder::adoptEventLogger(
    ::capnp::Orphan< ::EventLoggerSettings>&& value) {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::EVENT_LOGGER);
  ::capnp::_::PointerHelpers< ::EventLoggerSettings>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::EventLoggerSettings> Server::Settings::Builder::disownEventLogger() {
  KJ_IREQUIRE((which() == Server::Settings::EVENT_LOGGER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::EventLoggerSettings>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Server::Settings::Reader::isRequestHistogrammer() const {
  return which() == Server::Settings::REQUEST_HISTOGRAMMER;
}
inline bool Server::Settings::Builder::isRequestHistogrammer() {
  return which() == Server::Settings::REQUEST_HISTOGRAMMER;
}
inline bool Server::Settings::Reader::hasRequestHistogrammer() const {
  if (which() != Server::Settings::REQUEST_HISTOGRAMMER) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Server::Settings::Builder::hasRequestHistogrammer() {
  if (which() != Server::Settings::REQUEST_HISTOGRAMMER) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::RequestHistogrammerSettings::Reader Server::Settings::Reader::getRequestHistogrammer() const {
  KJ_IREQUIRE((which() == Server::Settings::REQUEST_HISTOGRAMMER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RequestHistogrammerSettings>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::RequestHistogrammerSettings::Builder Server::Settings::Builder::getRequestHistogrammer() {
  KJ_IREQUIRE((which() == Server::Settings::REQUEST_HISTOGRAMMER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RequestHistogrammerSettings>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Server::Settings::Builder::setRequestHistogrammer( ::RequestHistogrammerSettings::Reader value) {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::REQUEST_HISTOGRAMMER);
  ::capnp::_::PointerHelpers< ::RequestHistogrammerSettings>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::RequestHistogrammerSettings::Builder Server::Settings::Builder::initRequestHistogrammer() {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::REQUEST_HISTOGRAMMER);
  return ::capnp::_::PointerHelpers< ::RequestHistogrammerSettings>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Server::Settings::Builder::adoptRequestHistogrammer(
    ::capnp::Orphan< ::RequestHistogrammerSettings>&& value) {
  _builder.setDataField<Server::Settings::Which>(
      0 * ::capnp::ELEMENTS, Server::Settings::REQUEST_HISTOGRAMMER);
  ::capnp::_::PointerHelpers< ::RequestHistogrammerSettings>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RequestHistogrammerSettings> Server::Settings::Builder::disownRequestHistogrammer() {
  KJ_IREQUIRE((which() == Server::Settings::REQUEST_HISTOGRAMMER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RequestHistogrammerSettings>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_9becb3f0024216cc_
