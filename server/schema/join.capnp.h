// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: join.capnp

#ifndef CAPNP_INCLUDED_a6e63b6c9b7e6567_
#define CAPNP_INCLUDED_a6e63b6c9b7e6567_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "card.capnp.h"
#include "section.capnp.h"
#include "user.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8003a1de1a845568);
CAPNP_DECLARE_SCHEMA(faaf3a0c4e0b5737);
CAPNP_DECLARE_SCHEMA(ddf54c76cfbe95b5);
enum class Status_ddf54c76cfbe95b5: uint16_t {
  NEW,
  EXISTING,
};
CAPNP_DECLARE_ENUM(Status, ddf54c76cfbe95b5);

}  // namespace schemas
}  // namespace capnp


struct JoinRequest {
  JoinRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8003a1de1a845568, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct JoinResponse {
  JoinResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_ddf54c76cfbe95b5 Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(faaf3a0c4e0b5737, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class JoinRequest::Reader {
public:
  typedef JoinRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTelephone() const;
  inline  ::capnp::Text::Reader getTelephone() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinRequest::Builder {
public:
  typedef JoinRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTelephone();
  inline  ::capnp::Text::Builder getTelephone();
  inline void setTelephone( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTelephone(unsigned int size);
  inline void adoptTelephone(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTelephone();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinRequest::Pipeline {
public:
  typedef JoinRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinResponse::Reader {
public:
  typedef JoinResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::JoinResponse::Status getStatus() const;

  inline bool hasUser() const;
  inline  ::User::Reader getUser() const;

  inline bool hasCard() const;
  inline  ::Card::Reader getCard() const;

  inline bool hasSections() const;
  inline  ::capnp::List< ::Section>::Reader getSections() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinResponse::Builder {
public:
  typedef JoinResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::JoinResponse::Status getStatus();
  inline void setStatus( ::JoinResponse::Status value);

  inline bool hasUser();
  inline  ::User::Builder getUser();
  inline void setUser( ::User::Reader value);
  inline  ::User::Builder initUser();
  inline void adoptUser(::capnp::Orphan< ::User>&& value);
  inline ::capnp::Orphan< ::User> disownUser();

  inline bool hasCard();
  inline  ::Card::Builder getCard();
  inline void setCard( ::Card::Reader value);
  inline  ::Card::Builder initCard();
  inline void adoptCard(::capnp::Orphan< ::Card>&& value);
  inline ::capnp::Orphan< ::Card> disownCard();

  inline bool hasSections();
  inline  ::capnp::List< ::Section>::Builder getSections();
  inline void setSections( ::capnp::List< ::Section>::Reader value);
  inline  ::capnp::List< ::Section>::Builder initSections(unsigned int size);
  inline void adoptSections(::capnp::Orphan< ::capnp::List< ::Section>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Section>> disownSections();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinResponse::Pipeline {
public:
  typedef JoinResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::User::Pipeline getUser();
  inline  ::Card::Pipeline getCard();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool JoinRequest::Reader::hasTelephone() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool JoinRequest::Builder::hasTelephone() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader JoinRequest::Reader::getTelephone() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder JoinRequest::Builder::getTelephone() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void JoinRequest::Builder::setTelephone( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder JoinRequest::Builder::initTelephone(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void JoinRequest::Builder::adoptTelephone(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> JoinRequest::Builder::disownTelephone() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::JoinResponse::Status JoinResponse::Reader::getStatus() const {
  return _reader.getDataField< ::JoinResponse::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::JoinResponse::Status JoinResponse::Builder::getStatus() {
  return _builder.getDataField< ::JoinResponse::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void JoinResponse::Builder::setStatus( ::JoinResponse::Status value) {
  _builder.setDataField< ::JoinResponse::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool JoinResponse::Reader::hasUser() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool JoinResponse::Builder::hasUser() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::User::Reader JoinResponse::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::User>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::User::Builder JoinResponse::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::User>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::User::Pipeline JoinResponse::Pipeline::getUser() {
  return  ::User::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void JoinResponse::Builder::setUser( ::User::Reader value) {
  ::capnp::_::PointerHelpers< ::User>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::User::Builder JoinResponse::Builder::initUser() {
  return ::capnp::_::PointerHelpers< ::User>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void JoinResponse::Builder::adoptUser(
    ::capnp::Orphan< ::User>&& value) {
  ::capnp::_::PointerHelpers< ::User>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::User> JoinResponse::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::User>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool JoinResponse::Reader::hasCard() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool JoinResponse::Builder::hasCard() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Card::Reader JoinResponse::Reader::getCard() const {
  return ::capnp::_::PointerHelpers< ::Card>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Card::Builder JoinResponse::Builder::getCard() {
  return ::capnp::_::PointerHelpers< ::Card>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Card::Pipeline JoinResponse::Pipeline::getCard() {
  return  ::Card::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void JoinResponse::Builder::setCard( ::Card::Reader value) {
  ::capnp::_::PointerHelpers< ::Card>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Card::Builder JoinResponse::Builder::initCard() {
  return ::capnp::_::PointerHelpers< ::Card>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void JoinResponse::Builder::adoptCard(
    ::capnp::Orphan< ::Card>&& value) {
  ::capnp::_::PointerHelpers< ::Card>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Card> JoinResponse::Builder::disownCard() {
  return ::capnp::_::PointerHelpers< ::Card>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool JoinResponse::Reader::hasSections() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool JoinResponse::Builder::hasSections() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Section>::Reader JoinResponse::Reader::getSections() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Section>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Section>::Builder JoinResponse::Builder::getSections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Section>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void JoinResponse::Builder::setSections( ::capnp::List< ::Section>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Section>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Section>::Builder JoinResponse::Builder::initSections(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Section>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void JoinResponse::Builder::adoptSections(
    ::capnp::Orphan< ::capnp::List< ::Section>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Section>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Section>> JoinResponse::Builder::disownSections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Section>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_a6e63b6c9b7e6567_
