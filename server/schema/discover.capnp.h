// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: discover.capnp

#ifndef CAPNP_INCLUDED_c00a04b463992979_
#define CAPNP_INCLUDED_c00a04b463992979_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "card_info.capnp.h"
#include "discover_info.capnp.h"
#include "section_info.capnp.h"
#include "sync_info.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fc48d1aa50643f9d);
CAPNP_DECLARE_SCHEMA(bd0bc14cb7bb4fcf);
CAPNP_DECLARE_SCHEMA(ff4d8d3b40a8e021);

}  // namespace schemas
}  // namespace capnp


struct DiscoverRequest {
  DiscoverRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc48d1aa50643f9d, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoverResponse {
  DiscoverResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd0bc14cb7bb4fcf, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoverAckResponse {
  DiscoverAckResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff4d8d3b40a8e021, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class DiscoverRequest::Reader {
public:
  typedef DiscoverRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

  inline bool hasDiscoverInfo() const;
  inline  ::DiscoverInfo::Reader getDiscoverInfo() const;

  inline bool hasSyncInfo() const;
  inline  ::SyncInfo::Reader getSyncInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoverRequest::Builder {
public:
  typedef DiscoverRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool hasDiscoverInfo();
  inline  ::DiscoverInfo::Builder getDiscoverInfo();
  inline void setDiscoverInfo( ::DiscoverInfo::Reader value);
  inline  ::DiscoverInfo::Builder initDiscoverInfo();
  inline void adoptDiscoverInfo(::capnp::Orphan< ::DiscoverInfo>&& value);
  inline ::capnp::Orphan< ::DiscoverInfo> disownDiscoverInfo();

  inline bool hasSyncInfo();
  inline  ::SyncInfo::Builder getSyncInfo();
  inline void setSyncInfo( ::SyncInfo::Reader value);
  inline  ::SyncInfo::Builder initSyncInfo();
  inline void adoptSyncInfo(::capnp::Orphan< ::SyncInfo>&& value);
  inline ::capnp::Orphan< ::SyncInfo> disownSyncInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoverRequest::Pipeline {
public:
  typedef DiscoverRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DiscoverInfo::Pipeline getDiscoverInfo();
  inline  ::SyncInfo::Pipeline getSyncInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoverResponse::Reader {
public:
  typedef DiscoverResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

  inline bool hasDiscoverInfo() const;
  inline  ::DiscoverInfo::Reader getDiscoverInfo() const;

  inline bool hasSyncInfo() const;
  inline  ::SyncInfo::Reader getSyncInfo() const;

  inline bool hasSection() const;
  inline  ::SectionInfo::Reader getSection() const;

  inline bool hasCards() const;
  inline  ::capnp::List< ::CardInfo>::Reader getCards() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoverResponse::Builder {
public:
  typedef DiscoverResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool hasDiscoverInfo();
  inline  ::DiscoverInfo::Builder getDiscoverInfo();
  inline void setDiscoverInfo( ::DiscoverInfo::Reader value);
  inline  ::DiscoverInfo::Builder initDiscoverInfo();
  inline void adoptDiscoverInfo(::capnp::Orphan< ::DiscoverInfo>&& value);
  inline ::capnp::Orphan< ::DiscoverInfo> disownDiscoverInfo();

  inline bool hasSyncInfo();
  inline  ::SyncInfo::Builder getSyncInfo();
  inline void setSyncInfo( ::SyncInfo::Reader value);
  inline  ::SyncInfo::Builder initSyncInfo();
  inline void adoptSyncInfo(::capnp::Orphan< ::SyncInfo>&& value);
  inline ::capnp::Orphan< ::SyncInfo> disownSyncInfo();

  inline bool hasSection();
  inline  ::SectionInfo::Builder getSection();
  inline void setSection( ::SectionInfo::Reader value);
  inline  ::SectionInfo::Builder initSection();
  inline void adoptSection(::capnp::Orphan< ::SectionInfo>&& value);
  inline ::capnp::Orphan< ::SectionInfo> disownSection();

  inline bool hasCards();
  inline  ::capnp::List< ::CardInfo>::Builder getCards();
  inline void setCards( ::capnp::List< ::CardInfo>::Reader value);
  inline  ::capnp::List< ::CardInfo>::Builder initCards(unsigned int size);
  inline void adoptCards(::capnp::Orphan< ::capnp::List< ::CardInfo>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::CardInfo>> disownCards();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoverResponse::Pipeline {
public:
  typedef DiscoverResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DiscoverInfo::Pipeline getDiscoverInfo();
  inline  ::SyncInfo::Pipeline getSyncInfo();
  inline  ::SectionInfo::Pipeline getSection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoverAckResponse::Reader {
public:
  typedef DiscoverAckResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoverAckResponse::Builder {
public:
  typedef DiscoverAckResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoverAckResponse::Pipeline {
public:
  typedef DiscoverAckResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int64_t DiscoverRequest::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t DiscoverRequest::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DiscoverRequest::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DiscoverRequest::Reader::hasDiscoverInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverRequest::Builder::hasDiscoverInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::DiscoverInfo::Reader DiscoverRequest::Reader::getDiscoverInfo() const {
  return ::capnp::_::PointerHelpers< ::DiscoverInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::DiscoverInfo::Builder DiscoverRequest::Builder::getDiscoverInfo() {
  return ::capnp::_::PointerHelpers< ::DiscoverInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DiscoverInfo::Pipeline DiscoverRequest::Pipeline::getDiscoverInfo() {
  return  ::DiscoverInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DiscoverRequest::Builder::setDiscoverInfo( ::DiscoverInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::DiscoverInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::DiscoverInfo::Builder DiscoverRequest::Builder::initDiscoverInfo() {
  return ::capnp::_::PointerHelpers< ::DiscoverInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoverRequest::Builder::adoptDiscoverInfo(
    ::capnp::Orphan< ::DiscoverInfo>&& value) {
  ::capnp::_::PointerHelpers< ::DiscoverInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DiscoverInfo> DiscoverRequest::Builder::disownDiscoverInfo() {
  return ::capnp::_::PointerHelpers< ::DiscoverInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoverRequest::Reader::hasSyncInfo() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverRequest::Builder::hasSyncInfo() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::SyncInfo::Reader DiscoverRequest::Reader::getSyncInfo() const {
  return ::capnp::_::PointerHelpers< ::SyncInfo>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::SyncInfo::Builder DiscoverRequest::Builder::getSyncInfo() {
  return ::capnp::_::PointerHelpers< ::SyncInfo>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SyncInfo::Pipeline DiscoverRequest::Pipeline::getSyncInfo() {
  return  ::SyncInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DiscoverRequest::Builder::setSyncInfo( ::SyncInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::SyncInfo>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::SyncInfo::Builder DiscoverRequest::Builder::initSyncInfo() {
  return ::capnp::_::PointerHelpers< ::SyncInfo>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DiscoverRequest::Builder::adoptSyncInfo(
    ::capnp::Orphan< ::SyncInfo>&& value) {
  ::capnp::_::PointerHelpers< ::SyncInfo>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SyncInfo> DiscoverRequest::Builder::disownSyncInfo() {
  return ::capnp::_::PointerHelpers< ::SyncInfo>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int64_t DiscoverResponse::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t DiscoverResponse::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DiscoverResponse::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DiscoverResponse::Reader::hasDiscoverInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverResponse::Builder::hasDiscoverInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::DiscoverInfo::Reader DiscoverResponse::Reader::getDiscoverInfo() const {
  return ::capnp::_::PointerHelpers< ::DiscoverInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::DiscoverInfo::Builder DiscoverResponse::Builder::getDiscoverInfo() {
  return ::capnp::_::PointerHelpers< ::DiscoverInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DiscoverInfo::Pipeline DiscoverResponse::Pipeline::getDiscoverInfo() {
  return  ::DiscoverInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DiscoverResponse::Builder::setDiscoverInfo( ::DiscoverInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::DiscoverInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::DiscoverInfo::Builder DiscoverResponse::Builder::initDiscoverInfo() {
  return ::capnp::_::PointerHelpers< ::DiscoverInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoverResponse::Builder::adoptDiscoverInfo(
    ::capnp::Orphan< ::DiscoverInfo>&& value) {
  ::capnp::_::PointerHelpers< ::DiscoverInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DiscoverInfo> DiscoverResponse::Builder::disownDiscoverInfo() {
  return ::capnp::_::PointerHelpers< ::DiscoverInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoverResponse::Reader::hasSyncInfo() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverResponse::Builder::hasSyncInfo() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::SyncInfo::Reader DiscoverResponse::Reader::getSyncInfo() const {
  return ::capnp::_::PointerHelpers< ::SyncInfo>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::SyncInfo::Builder DiscoverResponse::Builder::getSyncInfo() {
  return ::capnp::_::PointerHelpers< ::SyncInfo>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SyncInfo::Pipeline DiscoverResponse::Pipeline::getSyncInfo() {
  return  ::SyncInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DiscoverResponse::Builder::setSyncInfo( ::SyncInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::SyncInfo>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::SyncInfo::Builder DiscoverResponse::Builder::initSyncInfo() {
  return ::capnp::_::PointerHelpers< ::SyncInfo>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DiscoverResponse::Builder::adoptSyncInfo(
    ::capnp::Orphan< ::SyncInfo>&& value) {
  ::capnp::_::PointerHelpers< ::SyncInfo>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SyncInfo> DiscoverResponse::Builder::disownSyncInfo() {
  return ::capnp::_::PointerHelpers< ::SyncInfo>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DiscoverResponse::Reader::hasSection() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverResponse::Builder::hasSection() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::SectionInfo::Reader DiscoverResponse::Reader::getSection() const {
  return ::capnp::_::PointerHelpers< ::SectionInfo>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::SectionInfo::Builder DiscoverResponse::Builder::getSection() {
  return ::capnp::_::PointerHelpers< ::SectionInfo>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SectionInfo::Pipeline DiscoverResponse::Pipeline::getSection() {
  return  ::SectionInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void DiscoverResponse::Builder::setSection( ::SectionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::SectionInfo>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::SectionInfo::Builder DiscoverResponse::Builder::initSection() {
  return ::capnp::_::PointerHelpers< ::SectionInfo>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void DiscoverResponse::Builder::adoptSection(
    ::capnp::Orphan< ::SectionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::SectionInfo>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SectionInfo> DiscoverResponse::Builder::disownSection() {
  return ::capnp::_::PointerHelpers< ::SectionInfo>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool DiscoverResponse::Reader::hasCards() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool DiscoverResponse::Builder::hasCards() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::CardInfo>::Reader DiscoverResponse::Reader::getCards() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::CardInfo>::Builder DiscoverResponse::Builder::getCards() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void DiscoverResponse::Builder::setCards( ::capnp::List< ::CardInfo>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::CardInfo>::Builder DiscoverResponse::Builder::initCards(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void DiscoverResponse::Builder::adoptCards(
    ::capnp::Orphan< ::capnp::List< ::CardInfo>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::CardInfo>> DiscoverResponse::Builder::disownCards() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::int64_t DiscoverAckResponse::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t DiscoverAckResponse::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DiscoverAckResponse::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_c00a04b463992979_
