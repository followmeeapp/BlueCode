// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: section.capnp

#ifndef CAPNP_INCLUDED_da4003684f556034_
#define CAPNP_INCLUDED_da4003684f556034_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "card_info.capnp.h"
#include "section_info.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f06fa914aa4f1ac6);

}  // namespace schemas
}  // namespace capnp


struct Section {
  Section() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f06fa914aa4f1ac6, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Section::Reader {
public:
  typedef Section Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId() const;

  inline bool hasInfo() const;
  inline  ::SectionInfo::Reader getInfo() const;

  inline bool hasCards() const;
  inline  ::capnp::List< ::CardInfo>::Reader getCards() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Section::Builder {
public:
  typedef Section Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId();
  inline void setId( ::int64_t value);

  inline bool hasInfo();
  inline  ::SectionInfo::Builder getInfo();
  inline void setInfo( ::SectionInfo::Reader value);
  inline  ::SectionInfo::Builder initInfo();
  inline void adoptInfo(::capnp::Orphan< ::SectionInfo>&& value);
  inline ::capnp::Orphan< ::SectionInfo> disownInfo();

  inline bool hasCards();
  inline  ::capnp::List< ::CardInfo>::Builder getCards();
  inline void setCards( ::capnp::List< ::CardInfo>::Reader value);
  inline  ::capnp::List< ::CardInfo>::Builder initCards(unsigned int size);
  inline void adoptCards(::capnp::Orphan< ::capnp::List< ::CardInfo>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::CardInfo>> disownCards();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Section::Pipeline {
public:
  typedef Section Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::SectionInfo::Pipeline getInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int64_t Section::Reader::getId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t Section::Builder::getId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Section::Builder::setId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Section::Reader::hasInfo() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Section::Builder::hasInfo() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::SectionInfo::Reader Section::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::SectionInfo>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::SectionInfo::Builder Section::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::SectionInfo>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SectionInfo::Pipeline Section::Pipeline::getInfo() {
  return  ::SectionInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Section::Builder::setInfo( ::SectionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::SectionInfo>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::SectionInfo::Builder Section::Builder::initInfo() {
  return ::capnp::_::PointerHelpers< ::SectionInfo>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Section::Builder::adoptInfo(
    ::capnp::Orphan< ::SectionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::SectionInfo>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SectionInfo> Section::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::SectionInfo>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Section::Reader::hasCards() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Section::Builder::hasCards() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::CardInfo>::Reader Section::Reader::getCards() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::CardInfo>::Builder Section::Builder::getCards() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Section::Builder::setCards( ::capnp::List< ::CardInfo>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::CardInfo>::Builder Section::Builder::initCards(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Section::Builder::adoptCards(
    ::capnp::Orphan< ::capnp::List< ::CardInfo>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::CardInfo>> Section::Builder::disownCards() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::CardInfo>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_da4003684f556034_
