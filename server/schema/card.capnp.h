// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: card.capnp

#ifndef CAPNP_INCLUDED_d2e86bdff42f7c3a_
#define CAPNP_INCLUDED_d2e86bdff42f7c3a_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f817636c34f290cd);
CAPNP_DECLARE_SCHEMA(dc47300c7035a25a);
enum class Type_dc47300c7035a25a: uint16_t {
  FACEBOOK,
  TWITTER,
  INSTAGRAM,
  POKEMON_GO,
  SNAPCHAT,
  GOOGLE_PLUS,
  YOU_TUBE,
  PINTEREST,
  TUMBLR,
  LINKED_IN,
  PERISCOPE,
  VINE,
  SOUND_CLOUND,
  SINA_WEIBO,
  V_KONTAKTE,
};
CAPNP_DECLARE_ENUM(Type, dc47300c7035a25a);
CAPNP_DECLARE_SCHEMA(8c28a1695bda5395);
CAPNP_DECLARE_SCHEMA(b759c8b3bcadb41f);
CAPNP_DECLARE_SCHEMA(bd813380641ba78d);
CAPNP_DECLARE_SCHEMA(dad672334fc84c35);
CAPNP_DECLARE_SCHEMA(a14517b8c6a1ef87);
CAPNP_DECLARE_SCHEMA(c7b4fa4d67bba890);
enum class Status_c7b4fa4d67bba890: uint16_t {
  CURRENT,
  UPDATED,
  CREATED,
};
CAPNP_DECLARE_ENUM(Status, c7b4fa4d67bba890);

}  // namespace schemas
}  // namespace capnp


struct Network {
  Network() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_dc47300c7035a25a Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f817636c34f290cd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Card {
  Card() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c28a1695bda5395, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CreateCardRequest {
  CreateCardRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b759c8b3bcadb41f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UpdateCardRequest {
  UpdateCardRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd813380641ba78d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CardRequest {
  CardRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dad672334fc84c35, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct CardResponse {
  CardResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_c7b4fa4d67bba890 Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a14517b8c6a1ef87, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Network::Reader {
public:
  typedef Network Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::Network::Type getType() const;

  inline bool hasUsername() const;
  inline  ::capnp::Text::Reader getUsername() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Network::Builder {
public:
  typedef Network Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Network::Type getType();
  inline void setType( ::Network::Type value);

  inline bool hasUsername();
  inline  ::capnp::Text::Builder getUsername();
  inline void setUsername( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUsername(unsigned int size);
  inline void adoptUsername(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUsername();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Network::Pipeline {
public:
  typedef Network Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Card::Reader {
public:
  typedef Card Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId() const;

  inline  ::uint32_t getVersion() const;

  inline bool hasFullName() const;
  inline  ::capnp::Text::Reader getFullName() const;

  inline bool hasLocation() const;
  inline  ::capnp::Text::Reader getLocation() const;

  inline bool hasBio() const;
  inline  ::capnp::Text::Reader getBio() const;

  inline bool hasAvatarURLString() const;
  inline  ::capnp::Text::Reader getAvatarURLString() const;

  inline bool hasBackgroundURLString() const;
  inline  ::capnp::Text::Reader getBackgroundURLString() const;

  inline bool getHasFacebook() const;

  inline bool getHasTwitter() const;

  inline bool getHasInstagram() const;

  inline bool getHasPokemonGo() const;

  inline bool getHasSnapchat() const;

  inline bool getHasGooglePlus() const;

  inline bool getHasYouTube() const;

  inline bool getHasPinterest() const;

  inline bool getHasTumblr() const;

  inline bool getHasLinkedIn() const;

  inline bool getHasPeriscope() const;

  inline bool getHasVine() const;

  inline bool getHasSoundCloud() const;

  inline bool getHasSinaWeibo() const;

  inline bool getHasVKontakte() const;

  inline bool hasNetworks() const;
  inline  ::capnp::List< ::Network>::Reader getNetworks() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Card::Builder {
public:
  typedef Card Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId();
  inline void setId( ::int64_t value);

  inline  ::uint32_t getVersion();
  inline void setVersion( ::uint32_t value);

  inline bool hasFullName();
  inline  ::capnp::Text::Builder getFullName();
  inline void setFullName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFullName(unsigned int size);
  inline void adoptFullName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFullName();

  inline bool hasLocation();
  inline  ::capnp::Text::Builder getLocation();
  inline void setLocation( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLocation(unsigned int size);
  inline void adoptLocation(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLocation();

  inline bool hasBio();
  inline  ::capnp::Text::Builder getBio();
  inline void setBio( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBio(unsigned int size);
  inline void adoptBio(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBio();

  inline bool hasAvatarURLString();
  inline  ::capnp::Text::Builder getAvatarURLString();
  inline void setAvatarURLString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAvatarURLString(unsigned int size);
  inline void adoptAvatarURLString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAvatarURLString();

  inline bool hasBackgroundURLString();
  inline  ::capnp::Text::Builder getBackgroundURLString();
  inline void setBackgroundURLString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBackgroundURLString(unsigned int size);
  inline void adoptBackgroundURLString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBackgroundURLString();

  inline bool getHasFacebook();
  inline void setHasFacebook(bool value);

  inline bool getHasTwitter();
  inline void setHasTwitter(bool value);

  inline bool getHasInstagram();
  inline void setHasInstagram(bool value);

  inline bool getHasPokemonGo();
  inline void setHasPokemonGo(bool value);

  inline bool getHasSnapchat();
  inline void setHasSnapchat(bool value);

  inline bool getHasGooglePlus();
  inline void setHasGooglePlus(bool value);

  inline bool getHasYouTube();
  inline void setHasYouTube(bool value);

  inline bool getHasPinterest();
  inline void setHasPinterest(bool value);

  inline bool getHasTumblr();
  inline void setHasTumblr(bool value);

  inline bool getHasLinkedIn();
  inline void setHasLinkedIn(bool value);

  inline bool getHasPeriscope();
  inline void setHasPeriscope(bool value);

  inline bool getHasVine();
  inline void setHasVine(bool value);

  inline bool getHasSoundCloud();
  inline void setHasSoundCloud(bool value);

  inline bool getHasSinaWeibo();
  inline void setHasSinaWeibo(bool value);

  inline bool getHasVKontakte();
  inline void setHasVKontakte(bool value);

  inline bool hasNetworks();
  inline  ::capnp::List< ::Network>::Builder getNetworks();
  inline void setNetworks( ::capnp::List< ::Network>::Reader value);
  inline  ::capnp::List< ::Network>::Builder initNetworks(unsigned int size);
  inline void adoptNetworks(::capnp::Orphan< ::capnp::List< ::Network>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Network>> disownNetworks();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Card::Pipeline {
public:
  typedef Card Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CreateCardRequest::Reader {
public:
  typedef CreateCardRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCard() const;
  inline  ::Card::Reader getCard() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CreateCardRequest::Builder {
public:
  typedef CreateCardRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCard();
  inline  ::Card::Builder getCard();
  inline void setCard( ::Card::Reader value);
  inline  ::Card::Builder initCard();
  inline void adoptCard(::capnp::Orphan< ::Card>&& value);
  inline ::capnp::Orphan< ::Card> disownCard();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CreateCardRequest::Pipeline {
public:
  typedef CreateCardRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Card::Pipeline getCard();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UpdateCardRequest::Reader {
public:
  typedef UpdateCardRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasCard() const;
  inline  ::Card::Reader getCard() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UpdateCardRequest::Builder {
public:
  typedef UpdateCardRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCard();
  inline  ::Card::Builder getCard();
  inline void setCard( ::Card::Reader value);
  inline  ::Card::Builder initCard();
  inline void adoptCard(::capnp::Orphan< ::Card>&& value);
  inline ::capnp::Orphan< ::Card> disownCard();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UpdateCardRequest::Pipeline {
public:
  typedef UpdateCardRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Card::Pipeline getCard();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CardRequest::Reader {
public:
  typedef CardRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId() const;

  inline  ::uint32_t getVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CardRequest::Builder {
public:
  typedef CardRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId();
  inline void setId( ::int64_t value);

  inline  ::uint32_t getVersion();
  inline void setVersion( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CardRequest::Pipeline {
public:
  typedef CardRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CardResponse::Reader {
public:
  typedef CardResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::CardResponse::Status getStatus() const;

  inline bool hasCard() const;
  inline  ::Card::Reader getCard() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CardResponse::Builder {
public:
  typedef CardResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::CardResponse::Status getStatus();
  inline void setStatus( ::CardResponse::Status value);

  inline bool hasCard();
  inline  ::Card::Builder getCard();
  inline void setCard( ::Card::Reader value);
  inline  ::Card::Builder initCard();
  inline void adoptCard(::capnp::Orphan< ::Card>&& value);
  inline ::capnp::Orphan< ::Card> disownCard();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CardResponse::Pipeline {
public:
  typedef CardResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Card::Pipeline getCard();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::Network::Type Network::Reader::getType() const {
  return _reader.getDataField< ::Network::Type>(
      0 * ::capnp::ELEMENTS);
}

inline  ::Network::Type Network::Builder::getType() {
  return _builder.getDataField< ::Network::Type>(
      0 * ::capnp::ELEMENTS);
}
inline void Network::Builder::setType( ::Network::Type value) {
  _builder.setDataField< ::Network::Type>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Network::Reader::hasUsername() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Network::Builder::hasUsername() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Network::Reader::getUsername() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Network::Builder::getUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Network::Builder::setUsername( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Network::Builder::initUsername(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Network::Builder::adoptUsername(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Network::Builder::disownUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t Card::Reader::getId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t Card::Builder::getId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Card::Reader::getVersion() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Card::Builder::getVersion() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::hasFullName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Card::Builder::hasFullName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Card::Reader::getFullName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Card::Builder::getFullName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Card::Builder::setFullName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Card::Builder::initFullName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Card::Builder::adoptFullName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Card::Builder::disownFullName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Card::Reader::hasLocation() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Card::Builder::hasLocation() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Card::Reader::getLocation() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Card::Builder::getLocation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Card::Builder::setLocation( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Card::Builder::initLocation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Card::Builder::adoptLocation(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Card::Builder::disownLocation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Card::Reader::hasBio() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Card::Builder::hasBio() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Card::Reader::getBio() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Card::Builder::getBio() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Card::Builder::setBio( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Card::Builder::initBio(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Card::Builder::adoptBio(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Card::Builder::disownBio() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Card::Reader::hasAvatarURLString() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Card::Builder::hasAvatarURLString() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Card::Reader::getAvatarURLString() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Card::Builder::getAvatarURLString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Card::Builder::setAvatarURLString( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Card::Builder::initAvatarURLString(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Card::Builder::adoptAvatarURLString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Card::Builder::disownAvatarURLString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Card::Reader::hasBackgroundURLString() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Card::Builder::hasBackgroundURLString() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Card::Reader::getBackgroundURLString() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Card::Builder::getBackgroundURLString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Card::Builder::setBackgroundURLString( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Card::Builder::initBackgroundURLString(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Card::Builder::adoptBackgroundURLString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Card::Builder::disownBackgroundURLString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Card::Reader::getHasFacebook() const {
  return _reader.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasFacebook() {
  return _builder.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasFacebook(bool value) {
  _builder.setDataField<bool>(
      96 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasTwitter() const {
  return _reader.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasTwitter() {
  return _builder.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasTwitter(bool value) {
  _builder.setDataField<bool>(
      97 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasInstagram() const {
  return _reader.getDataField<bool>(
      98 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasInstagram() {
  return _builder.getDataField<bool>(
      98 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasInstagram(bool value) {
  _builder.setDataField<bool>(
      98 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasPokemonGo() const {
  return _reader.getDataField<bool>(
      99 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasPokemonGo() {
  return _builder.getDataField<bool>(
      99 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasPokemonGo(bool value) {
  _builder.setDataField<bool>(
      99 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasSnapchat() const {
  return _reader.getDataField<bool>(
      100 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasSnapchat() {
  return _builder.getDataField<bool>(
      100 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasSnapchat(bool value) {
  _builder.setDataField<bool>(
      100 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasGooglePlus() const {
  return _reader.getDataField<bool>(
      101 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasGooglePlus() {
  return _builder.getDataField<bool>(
      101 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasGooglePlus(bool value) {
  _builder.setDataField<bool>(
      101 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasYouTube() const {
  return _reader.getDataField<bool>(
      102 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasYouTube() {
  return _builder.getDataField<bool>(
      102 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasYouTube(bool value) {
  _builder.setDataField<bool>(
      102 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasPinterest() const {
  return _reader.getDataField<bool>(
      103 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasPinterest() {
  return _builder.getDataField<bool>(
      103 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasPinterest(bool value) {
  _builder.setDataField<bool>(
      103 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasTumblr() const {
  return _reader.getDataField<bool>(
      104 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasTumblr() {
  return _builder.getDataField<bool>(
      104 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasTumblr(bool value) {
  _builder.setDataField<bool>(
      104 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasLinkedIn() const {
  return _reader.getDataField<bool>(
      105 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasLinkedIn() {
  return _builder.getDataField<bool>(
      105 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasLinkedIn(bool value) {
  _builder.setDataField<bool>(
      105 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasPeriscope() const {
  return _reader.getDataField<bool>(
      106 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasPeriscope() {
  return _builder.getDataField<bool>(
      106 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasPeriscope(bool value) {
  _builder.setDataField<bool>(
      106 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasVine() const {
  return _reader.getDataField<bool>(
      107 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasVine() {
  return _builder.getDataField<bool>(
      107 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasVine(bool value) {
  _builder.setDataField<bool>(
      107 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasSoundCloud() const {
  return _reader.getDataField<bool>(
      108 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasSoundCloud() {
  return _builder.getDataField<bool>(
      108 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasSoundCloud(bool value) {
  _builder.setDataField<bool>(
      108 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasSinaWeibo() const {
  return _reader.getDataField<bool>(
      109 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasSinaWeibo() {
  return _builder.getDataField<bool>(
      109 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasSinaWeibo(bool value) {
  _builder.setDataField<bool>(
      109 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::getHasVKontakte() const {
  return _reader.getDataField<bool>(
      110 * ::capnp::ELEMENTS);
}

inline bool Card::Builder::getHasVKontakte() {
  return _builder.getDataField<bool>(
      110 * ::capnp::ELEMENTS);
}
inline void Card::Builder::setHasVKontakte(bool value) {
  _builder.setDataField<bool>(
      110 * ::capnp::ELEMENTS, value);
}

inline bool Card::Reader::hasNetworks() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Card::Builder::hasNetworks() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Network>::Reader Card::Reader::getNetworks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Network>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Network>::Builder Card::Builder::getNetworks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Network>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Card::Builder::setNetworks( ::capnp::List< ::Network>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Network>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Network>::Builder Card::Builder::initNetworks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Network>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Card::Builder::adoptNetworks(
    ::capnp::Orphan< ::capnp::List< ::Network>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Network>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Network>> Card::Builder::disownNetworks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Network>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool CreateCardRequest::Reader::hasCard() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CreateCardRequest::Builder::hasCard() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Card::Reader CreateCardRequest::Reader::getCard() const {
  return ::capnp::_::PointerHelpers< ::Card>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Card::Builder CreateCardRequest::Builder::getCard() {
  return ::capnp::_::PointerHelpers< ::Card>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Card::Pipeline CreateCardRequest::Pipeline::getCard() {
  return  ::Card::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CreateCardRequest::Builder::setCard( ::Card::Reader value) {
  ::capnp::_::PointerHelpers< ::Card>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Card::Builder CreateCardRequest::Builder::initCard() {
  return ::capnp::_::PointerHelpers< ::Card>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CreateCardRequest::Builder::adoptCard(
    ::capnp::Orphan< ::Card>&& value) {
  ::capnp::_::PointerHelpers< ::Card>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Card> CreateCardRequest::Builder::disownCard() {
  return ::capnp::_::PointerHelpers< ::Card>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool UpdateCardRequest::Reader::hasCard() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UpdateCardRequest::Builder::hasCard() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Card::Reader UpdateCardRequest::Reader::getCard() const {
  return ::capnp::_::PointerHelpers< ::Card>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Card::Builder UpdateCardRequest::Builder::getCard() {
  return ::capnp::_::PointerHelpers< ::Card>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Card::Pipeline UpdateCardRequest::Pipeline::getCard() {
  return  ::Card::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UpdateCardRequest::Builder::setCard( ::Card::Reader value) {
  ::capnp::_::PointerHelpers< ::Card>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Card::Builder UpdateCardRequest::Builder::initCard() {
  return ::capnp::_::PointerHelpers< ::Card>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void UpdateCardRequest::Builder::adoptCard(
    ::capnp::Orphan< ::Card>&& value) {
  ::capnp::_::PointerHelpers< ::Card>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Card> UpdateCardRequest::Builder::disownCard() {
  return ::capnp::_::PointerHelpers< ::Card>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t CardRequest::Reader::getId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t CardRequest::Builder::getId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void CardRequest::Builder::setId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CardRequest::Reader::getVersion() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t CardRequest::Builder::getVersion() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void CardRequest::Builder::setVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::CardResponse::Status CardResponse::Reader::getStatus() const {
  return _reader.getDataField< ::CardResponse::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::CardResponse::Status CardResponse::Builder::getStatus() {
  return _builder.getDataField< ::CardResponse::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void CardResponse::Builder::setStatus( ::CardResponse::Status value) {
  _builder.setDataField< ::CardResponse::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool CardResponse::Reader::hasCard() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool CardResponse::Builder::hasCard() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Card::Reader CardResponse::Reader::getCard() const {
  return ::capnp::_::PointerHelpers< ::Card>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Card::Builder CardResponse::Builder::getCard() {
  return ::capnp::_::PointerHelpers< ::Card>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Card::Pipeline CardResponse::Pipeline::getCard() {
  return  ::Card::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CardResponse::Builder::setCard( ::Card::Reader value) {
  ::capnp::_::PointerHelpers< ::Card>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Card::Builder CardResponse::Builder::initCard() {
  return ::capnp::_::PointerHelpers< ::Card>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void CardResponse::Builder::adoptCard(
    ::capnp::Orphan< ::Card>&& value) {
  ::capnp::_::PointerHelpers< ::Card>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Card> CardResponse::Builder::disownCard() {
  return ::capnp::_::PointerHelpers< ::Card>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_d2e86bdff42f7c3a_
