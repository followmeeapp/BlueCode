// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: response.capnp

#ifndef CAPNP_INCLUDED_af2ccbe7831ea534_
#define CAPNP_INCLUDED_af2ccbe7831ea534_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "card.capnp.h"
#include "discovery.capnp.h"
#include "error.capnp.h"
#include "hello.capnp.h"
#include "join.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ccd2d3e745ef932b);
CAPNP_DECLARE_SCHEMA(cacb77c63c05de8f);

}  // namespace schemas
}  // namespace capnp


struct Response {
  Response() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Kind;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccd2d3e745ef932b, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Response::Kind {
  Kind() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNKNOWN,
    PROCESSING,
    ERROR_RESPONSE,
    CARD_RESPONSE,
    DISCOVERY_RESPONSE,
    HELLO_RESPONSE,
    JOIN_RESPONSE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cacb77c63c05de8f, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Response::Reader {
public:
  typedef Response Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId() const;

  inline typename Kind::Reader getKind() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Response::Builder {
public:
  typedef Response Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getId();
  inline void setId( ::int64_t value);

  inline typename Kind::Builder getKind();
  inline typename Kind::Builder initKind();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Response::Pipeline {
public:
  typedef Response Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Kind::Pipeline getKind();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Response::Kind::Reader {
public:
  typedef Kind Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool isProcessing() const;
  inline  ::capnp::Void getProcessing() const;

  inline bool isErrorResponse() const;
  inline bool hasErrorResponse() const;
  inline  ::ErrorResponse::Reader getErrorResponse() const;

  inline bool isCardResponse() const;
  inline bool hasCardResponse() const;
  inline  ::CardResponse::Reader getCardResponse() const;

  inline bool isDiscoveryResponse() const;
  inline bool hasDiscoveryResponse() const;
  inline  ::DiscoveryResponse::Reader getDiscoveryResponse() const;

  inline bool isHelloResponse() const;
  inline bool hasHelloResponse() const;
  inline  ::HelloResponse::Reader getHelloResponse() const;

  inline bool isJoinResponse() const;
  inline bool hasJoinResponse() const;
  inline  ::JoinResponse::Reader getJoinResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Response::Kind::Builder {
public:
  typedef Kind Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::VOID);

  inline bool isProcessing();
  inline  ::capnp::Void getProcessing();
  inline void setProcessing( ::capnp::Void value = ::capnp::VOID);

  inline bool isErrorResponse();
  inline bool hasErrorResponse();
  inline  ::ErrorResponse::Builder getErrorResponse();
  inline void setErrorResponse( ::ErrorResponse::Reader value);
  inline  ::ErrorResponse::Builder initErrorResponse();
  inline void adoptErrorResponse(::capnp::Orphan< ::ErrorResponse>&& value);
  inline ::capnp::Orphan< ::ErrorResponse> disownErrorResponse();

  inline bool isCardResponse();
  inline bool hasCardResponse();
  inline  ::CardResponse::Builder getCardResponse();
  inline void setCardResponse( ::CardResponse::Reader value);
  inline  ::CardResponse::Builder initCardResponse();
  inline void adoptCardResponse(::capnp::Orphan< ::CardResponse>&& value);
  inline ::capnp::Orphan< ::CardResponse> disownCardResponse();

  inline bool isDiscoveryResponse();
  inline bool hasDiscoveryResponse();
  inline  ::DiscoveryResponse::Builder getDiscoveryResponse();
  inline void setDiscoveryResponse( ::DiscoveryResponse::Reader value);
  inline  ::DiscoveryResponse::Builder initDiscoveryResponse();
  inline void adoptDiscoveryResponse(::capnp::Orphan< ::DiscoveryResponse>&& value);
  inline ::capnp::Orphan< ::DiscoveryResponse> disownDiscoveryResponse();

  inline bool isHelloResponse();
  inline bool hasHelloResponse();
  inline  ::HelloResponse::Builder getHelloResponse();
  inline void setHelloResponse( ::HelloResponse::Reader value);
  inline  ::HelloResponse::Builder initHelloResponse();
  inline void adoptHelloResponse(::capnp::Orphan< ::HelloResponse>&& value);
  inline ::capnp::Orphan< ::HelloResponse> disownHelloResponse();

  inline bool isJoinResponse();
  inline bool hasJoinResponse();
  inline  ::JoinResponse::Builder getJoinResponse();
  inline void setJoinResponse( ::JoinResponse::Reader value);
  inline  ::JoinResponse::Builder initJoinResponse();
  inline void adoptJoinResponse(::capnp::Orphan< ::JoinResponse>&& value);
  inline ::capnp::Orphan< ::JoinResponse> disownJoinResponse();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Response::Kind::Pipeline {
public:
  typedef Kind Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int64_t Response::Reader::getId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t Response::Builder::getId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Response::Builder::setId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline typename Response::Kind::Reader Response::Reader::getKind() const {
  return Response::Kind::Reader(_reader);
}
inline typename Response::Kind::Builder Response::Builder::getKind() {
  return Response::Kind::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Response::Kind::Pipeline Response::Pipeline::getKind() {
  return Response::Kind::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Response::Kind::Builder Response::Builder::initKind() {
  _builder.setDataField< ::uint16_t>(4 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return Response::Kind::Builder(_builder);
}
inline  ::Response::Kind::Which Response::Kind::Reader::which() const {
  return _reader.getDataField<Which>(4 * ::capnp::ELEMENTS);
}
inline  ::Response::Kind::Which Response::Kind::Builder::which() {
  return _builder.getDataField<Which>(4 * ::capnp::ELEMENTS);
}

inline bool Response::Kind::Reader::isUnknown() const {
  return which() == Response::Kind::UNKNOWN;
}
inline bool Response::Kind::Builder::isUnknown() {
  return which() == Response::Kind::UNKNOWN;
}
inline  ::capnp::Void Response::Kind::Reader::getUnknown() const {
  KJ_IREQUIRE((which() == Response::Kind::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Response::Kind::Builder::getUnknown() {
  KJ_IREQUIRE((which() == Response::Kind::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Response::Kind::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Response::Kind::Reader::isProcessing() const {
  return which() == Response::Kind::PROCESSING;
}
inline bool Response::Kind::Builder::isProcessing() {
  return which() == Response::Kind::PROCESSING;
}
inline  ::capnp::Void Response::Kind::Reader::getProcessing() const {
  KJ_IREQUIRE((which() == Response::Kind::PROCESSING),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Response::Kind::Builder::getProcessing() {
  KJ_IREQUIRE((which() == Response::Kind::PROCESSING),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void Response::Kind::Builder::setProcessing( ::capnp::Void value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::PROCESSING);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Response::Kind::Reader::isErrorResponse() const {
  return which() == Response::Kind::ERROR_RESPONSE;
}
inline bool Response::Kind::Builder::isErrorResponse() {
  return which() == Response::Kind::ERROR_RESPONSE;
}
inline bool Response::Kind::Reader::hasErrorResponse() const {
  if (which() != Response::Kind::ERROR_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Response::Kind::Builder::hasErrorResponse() {
  if (which() != Response::Kind::ERROR_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ErrorResponse::Reader Response::Kind::Reader::getErrorResponse() const {
  KJ_IREQUIRE((which() == Response::Kind::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ErrorResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ErrorResponse::Builder Response::Kind::Builder::getErrorResponse() {
  KJ_IREQUIRE((which() == Response::Kind::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ErrorResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::setErrorResponse( ::ErrorResponse::Reader value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::ERROR_RESPONSE);
  ::capnp::_::PointerHelpers< ::ErrorResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ErrorResponse::Builder Response::Kind::Builder::initErrorResponse() {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::ERROR_RESPONSE);
  return ::capnp::_::PointerHelpers< ::ErrorResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::adoptErrorResponse(
    ::capnp::Orphan< ::ErrorResponse>&& value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::ERROR_RESPONSE);
  ::capnp::_::PointerHelpers< ::ErrorResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ErrorResponse> Response::Kind::Builder::disownErrorResponse() {
  KJ_IREQUIRE((which() == Response::Kind::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ErrorResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Response::Kind::Reader::isCardResponse() const {
  return which() == Response::Kind::CARD_RESPONSE;
}
inline bool Response::Kind::Builder::isCardResponse() {
  return which() == Response::Kind::CARD_RESPONSE;
}
inline bool Response::Kind::Reader::hasCardResponse() const {
  if (which() != Response::Kind::CARD_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Response::Kind::Builder::hasCardResponse() {
  if (which() != Response::Kind::CARD_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::CardResponse::Reader Response::Kind::Reader::getCardResponse() const {
  KJ_IREQUIRE((which() == Response::Kind::CARD_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CardResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::CardResponse::Builder Response::Kind::Builder::getCardResponse() {
  KJ_IREQUIRE((which() == Response::Kind::CARD_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CardResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::setCardResponse( ::CardResponse::Reader value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::CARD_RESPONSE);
  ::capnp::_::PointerHelpers< ::CardResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::CardResponse::Builder Response::Kind::Builder::initCardResponse() {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::CARD_RESPONSE);
  return ::capnp::_::PointerHelpers< ::CardResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::adoptCardResponse(
    ::capnp::Orphan< ::CardResponse>&& value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::CARD_RESPONSE);
  ::capnp::_::PointerHelpers< ::CardResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CardResponse> Response::Kind::Builder::disownCardResponse() {
  KJ_IREQUIRE((which() == Response::Kind::CARD_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CardResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Response::Kind::Reader::isDiscoveryResponse() const {
  return which() == Response::Kind::DISCOVERY_RESPONSE;
}
inline bool Response::Kind::Builder::isDiscoveryResponse() {
  return which() == Response::Kind::DISCOVERY_RESPONSE;
}
inline bool Response::Kind::Reader::hasDiscoveryResponse() const {
  if (which() != Response::Kind::DISCOVERY_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Response::Kind::Builder::hasDiscoveryResponse() {
  if (which() != Response::Kind::DISCOVERY_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::DiscoveryResponse::Reader Response::Kind::Reader::getDiscoveryResponse() const {
  KJ_IREQUIRE((which() == Response::Kind::DISCOVERY_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoveryResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::DiscoveryResponse::Builder Response::Kind::Builder::getDiscoveryResponse() {
  KJ_IREQUIRE((which() == Response::Kind::DISCOVERY_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoveryResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::setDiscoveryResponse( ::DiscoveryResponse::Reader value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::DISCOVERY_RESPONSE);
  ::capnp::_::PointerHelpers< ::DiscoveryResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::DiscoveryResponse::Builder Response::Kind::Builder::initDiscoveryResponse() {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::DISCOVERY_RESPONSE);
  return ::capnp::_::PointerHelpers< ::DiscoveryResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::adoptDiscoveryResponse(
    ::capnp::Orphan< ::DiscoveryResponse>&& value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::DISCOVERY_RESPONSE);
  ::capnp::_::PointerHelpers< ::DiscoveryResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DiscoveryResponse> Response::Kind::Builder::disownDiscoveryResponse() {
  KJ_IREQUIRE((which() == Response::Kind::DISCOVERY_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoveryResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Response::Kind::Reader::isHelloResponse() const {
  return which() == Response::Kind::HELLO_RESPONSE;
}
inline bool Response::Kind::Builder::isHelloResponse() {
  return which() == Response::Kind::HELLO_RESPONSE;
}
inline bool Response::Kind::Reader::hasHelloResponse() const {
  if (which() != Response::Kind::HELLO_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Response::Kind::Builder::hasHelloResponse() {
  if (which() != Response::Kind::HELLO_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::HelloResponse::Reader Response::Kind::Reader::getHelloResponse() const {
  KJ_IREQUIRE((which() == Response::Kind::HELLO_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::HelloResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::HelloResponse::Builder Response::Kind::Builder::getHelloResponse() {
  KJ_IREQUIRE((which() == Response::Kind::HELLO_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::HelloResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::setHelloResponse( ::HelloResponse::Reader value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::HELLO_RESPONSE);
  ::capnp::_::PointerHelpers< ::HelloResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::HelloResponse::Builder Response::Kind::Builder::initHelloResponse() {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::HELLO_RESPONSE);
  return ::capnp::_::PointerHelpers< ::HelloResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::adoptHelloResponse(
    ::capnp::Orphan< ::HelloResponse>&& value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::HELLO_RESPONSE);
  ::capnp::_::PointerHelpers< ::HelloResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::HelloResponse> Response::Kind::Builder::disownHelloResponse() {
  KJ_IREQUIRE((which() == Response::Kind::HELLO_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::HelloResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Response::Kind::Reader::isJoinResponse() const {
  return which() == Response::Kind::JOIN_RESPONSE;
}
inline bool Response::Kind::Builder::isJoinResponse() {
  return which() == Response::Kind::JOIN_RESPONSE;
}
inline bool Response::Kind::Reader::hasJoinResponse() const {
  if (which() != Response::Kind::JOIN_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Response::Kind::Builder::hasJoinResponse() {
  if (which() != Response::Kind::JOIN_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::JoinResponse::Reader Response::Kind::Reader::getJoinResponse() const {
  KJ_IREQUIRE((which() == Response::Kind::JOIN_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::JoinResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::JoinResponse::Builder Response::Kind::Builder::getJoinResponse() {
  KJ_IREQUIRE((which() == Response::Kind::JOIN_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::JoinResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::setJoinResponse( ::JoinResponse::Reader value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::JOIN_RESPONSE);
  ::capnp::_::PointerHelpers< ::JoinResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::JoinResponse::Builder Response::Kind::Builder::initJoinResponse() {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::JOIN_RESPONSE);
  return ::capnp::_::PointerHelpers< ::JoinResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Response::Kind::Builder::adoptJoinResponse(
    ::capnp::Orphan< ::JoinResponse>&& value) {
  _builder.setDataField<Response::Kind::Which>(
      4 * ::capnp::ELEMENTS, Response::Kind::JOIN_RESPONSE);
  ::capnp::_::PointerHelpers< ::JoinResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::JoinResponse> Response::Kind::Builder::disownJoinResponse() {
  KJ_IREQUIRE((which() == Response::Kind::JOIN_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::JoinResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_af2ccbe7831ea534_
