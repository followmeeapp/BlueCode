// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: section_info.capnp

#ifndef CAPNP_INCLUDED_b802249b6859cf0e_
#define CAPNP_INCLUDED_b802249b6859cf0e_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9b59453d5c0cc1cb);
CAPNP_DECLARE_SCHEMA(fbf5085dffb85332);
CAPNP_DECLARE_SCHEMA(ca83f7731f2b4d36);

}  // namespace schemas
}  // namespace capnp


struct SectionInfo {
  SectionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Kind;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b59453d5c0cc1cb, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SectionInfo::Kind {
  Kind() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNKNOWN,
    TIMESTAMP_SECTION,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbf5085dffb85332, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TimestampSection {
  TimestampSection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca83f7731f2b4d36, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SectionInfo::Reader {
public:
  typedef SectionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline typename Kind::Reader getKind() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SectionInfo::Builder {
public:
  typedef SectionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Kind::Builder getKind();
  inline typename Kind::Builder initKind();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SectionInfo::Pipeline {
public:
  typedef SectionInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Kind::Pipeline getKind();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SectionInfo::Kind::Reader {
public:
  typedef Kind Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool isTimestampSection() const;
  inline bool hasTimestampSection() const;
  inline  ::TimestampSection::Reader getTimestampSection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SectionInfo::Kind::Builder {
public:
  typedef Kind Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::VOID);

  inline bool isTimestampSection();
  inline bool hasTimestampSection();
  inline  ::TimestampSection::Builder getTimestampSection();
  inline void setTimestampSection( ::TimestampSection::Reader value);
  inline  ::TimestampSection::Builder initTimestampSection();
  inline void adoptTimestampSection(::capnp::Orphan< ::TimestampSection>&& value);
  inline ::capnp::Orphan< ::TimestampSection> disownTimestampSection();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SectionInfo::Kind::Pipeline {
public:
  typedef Kind Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TimestampSection::Reader {
public:
  typedef TimestampSection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

  inline  ::int64_t getLastCard() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TimestampSection::Builder {
public:
  typedef TimestampSection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline  ::int64_t getLastCard();
  inline void setLastCard( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TimestampSection::Pipeline {
public:
  typedef TimestampSection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline typename SectionInfo::Kind::Reader SectionInfo::Reader::getKind() const {
  return SectionInfo::Kind::Reader(_reader);
}
inline typename SectionInfo::Kind::Builder SectionInfo::Builder::getKind() {
  return SectionInfo::Kind::Builder(_builder);
}
#if !CAPNP_LITE
inline typename SectionInfo::Kind::Pipeline SectionInfo::Pipeline::getKind() {
  return SectionInfo::Kind::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename SectionInfo::Kind::Builder SectionInfo::Builder::initKind() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return SectionInfo::Kind::Builder(_builder);
}
inline  ::SectionInfo::Kind::Which SectionInfo::Kind::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::SectionInfo::Kind::Which SectionInfo::Kind::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool SectionInfo::Kind::Reader::isUnknown() const {
  return which() == SectionInfo::Kind::UNKNOWN;
}
inline bool SectionInfo::Kind::Builder::isUnknown() {
  return which() == SectionInfo::Kind::UNKNOWN;
}
inline  ::capnp::Void SectionInfo::Kind::Reader::getUnknown() const {
  KJ_IREQUIRE((which() == SectionInfo::Kind::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void SectionInfo::Kind::Builder::getUnknown() {
  KJ_IREQUIRE((which() == SectionInfo::Kind::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void SectionInfo::Kind::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<SectionInfo::Kind::Which>(
      0 * ::capnp::ELEMENTS, SectionInfo::Kind::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool SectionInfo::Kind::Reader::isTimestampSection() const {
  return which() == SectionInfo::Kind::TIMESTAMP_SECTION;
}
inline bool SectionInfo::Kind::Builder::isTimestampSection() {
  return which() == SectionInfo::Kind::TIMESTAMP_SECTION;
}
inline bool SectionInfo::Kind::Reader::hasTimestampSection() const {
  if (which() != SectionInfo::Kind::TIMESTAMP_SECTION) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SectionInfo::Kind::Builder::hasTimestampSection() {
  if (which() != SectionInfo::Kind::TIMESTAMP_SECTION) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::TimestampSection::Reader SectionInfo::Kind::Reader::getTimestampSection() const {
  KJ_IREQUIRE((which() == SectionInfo::Kind::TIMESTAMP_SECTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::TimestampSection>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::TimestampSection::Builder SectionInfo::Kind::Builder::getTimestampSection() {
  KJ_IREQUIRE((which() == SectionInfo::Kind::TIMESTAMP_SECTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::TimestampSection>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SectionInfo::Kind::Builder::setTimestampSection( ::TimestampSection::Reader value) {
  _builder.setDataField<SectionInfo::Kind::Which>(
      0 * ::capnp::ELEMENTS, SectionInfo::Kind::TIMESTAMP_SECTION);
  ::capnp::_::PointerHelpers< ::TimestampSection>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::TimestampSection::Builder SectionInfo::Kind::Builder::initTimestampSection() {
  _builder.setDataField<SectionInfo::Kind::Which>(
      0 * ::capnp::ELEMENTS, SectionInfo::Kind::TIMESTAMP_SECTION);
  return ::capnp::_::PointerHelpers< ::TimestampSection>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SectionInfo::Kind::Builder::adoptTimestampSection(
    ::capnp::Orphan< ::TimestampSection>&& value) {
  _builder.setDataField<SectionInfo::Kind::Which>(
      0 * ::capnp::ELEMENTS, SectionInfo::Kind::TIMESTAMP_SECTION);
  ::capnp::_::PointerHelpers< ::TimestampSection>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TimestampSection> SectionInfo::Kind::Builder::disownTimestampSection() {
  KJ_IREQUIRE((which() == SectionInfo::Kind::TIMESTAMP_SECTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::TimestampSection>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int64_t TimestampSection::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t TimestampSection::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TimestampSection::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TimestampSection::Reader::getLastCard() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TimestampSection::Builder::getLastCard() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TimestampSection::Builder::setLastCard( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_b802249b6859cf0e_
