// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: discovery.capnp

#include "discovery.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<73> b_9e801d0f2b203ef8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    248,  62,  32,  43,  15,  29, 128, 158,
     16,   0,   0,   0,   1,   0,   1,   0,
    189, 135, 251, 106,  54, 108, 206, 139,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115,  99, 111, 118, 101, 114,
    121,  46,  99,  97, 112, 110, 112,  58,
     68, 105, 115,  99, 111, 118, 101, 114,
    121,  82, 101, 113, 117, 101, 115, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    108,  97, 115, 116,  68, 105, 115,  99,
    111, 118, 101, 114, 121,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 114, 100, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  56, 123, 229,  67, 232,  12, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 118, 105,  99, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    129,   2, 191,  84, 179,  29, 155, 194,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9e801d0f2b203ef8 = b_9e801d0f2b203ef8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9e801d0f2b203ef8[] = {
  &s_c29b1db354bf0281,
  &s_c70ce843e57b388d,
};
static const uint16_t m_9e801d0f2b203ef8[] = {1, 2, 0};
static const uint16_t i_9e801d0f2b203ef8[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9e801d0f2b203ef8 = {
  0x9e801d0f2b203ef8, b_9e801d0f2b203ef8.words, 73, d_9e801d0f2b203ef8, m_9e801d0f2b203ef8,
  2, 3, i_9e801d0f2b203ef8, nullptr, nullptr, { &s_9e801d0f2b203ef8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_c9077587d76c5afa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250,  90, 108, 215, 135, 117,   7, 201,
     16,   0,   0,   0,   1,   0,   1,   0,
    189, 135, 251, 106,  54, 108, 206, 139,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115,  99, 111, 118, 101, 114,
    121,  46,  99,  97, 112, 110, 112,  58,
     68, 105, 115,  99, 111, 118, 101, 114,
    121,  82, 101, 115, 112, 111, 110, 115,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101,  99, 116, 105, 111, 110,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  26,  79, 170,  20, 169, 111, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 114, 100, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  56, 123, 229,  67, 232,  12, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c9077587d76c5afa = b_c9077587d76c5afa.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c9077587d76c5afa[] = {
  &s_c70ce843e57b388d,
  &s_f06fa914aa4f1ac6,
};
static const uint16_t m_c9077587d76c5afa[] = {2, 1, 0};
static const uint16_t i_c9077587d76c5afa[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c9077587d76c5afa = {
  0xc9077587d76c5afa, b_c9077587d76c5afa.words, 69, d_c9077587d76c5afa, m_c9077587d76c5afa,
  2, 3, i_c9077587d76c5afa, nullptr, nullptr, { &s_c9077587d76c5afa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// DiscoveryRequest
constexpr uint16_t DiscoveryRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t DiscoveryRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind DiscoveryRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DiscoveryRequest::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* DiscoveryRequest::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// DiscoveryResponse
constexpr uint16_t DiscoveryResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t DiscoveryResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind DiscoveryResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DiscoveryResponse::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* DiscoveryResponse::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



