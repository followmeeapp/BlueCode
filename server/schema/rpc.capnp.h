// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: rpc.capnp

#ifndef CAPNP_INCLUDED_9cb224a79c99320d_
#define CAPNP_INCLUDED_9cb224a79c99320d_

#include "capnproto/capnp/generated-header-support.h"

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "discover.capnp.h"
#include "error.capnp.h"
#include "sync.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f513e2652bb3e579);
CAPNP_DECLARE_SCHEMA(ec85661ad71fdfd0);

}  // namespace schemas
}  // namespace capnp


struct RPC {
  RPC() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Kind;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f513e2652bb3e579, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RPC::Kind {
  Kind() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNKNOWN,
    DISCOVER_REQUEST,
    DISCOVER_RESPONSE,
    DISCOVER_ACK_RESPONSE,
    SYNC_REQUEST,
    SYNC_RESPONSE,
    ERROR_RESPONSE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec85661ad71fdfd0, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class RPC::Reader {
public:
  typedef RPC Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getDevice() const;

  inline typename Kind::Reader getKind() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPC::Builder {
public:
  typedef RPC Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getDevice();
  inline void setDevice( ::int64_t value);

  inline typename Kind::Builder getKind();
  inline typename Kind::Builder initKind();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPC::Pipeline {
public:
  typedef RPC Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Kind::Pipeline getKind();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RPC::Kind::Reader {
public:
  typedef Kind Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool isDiscoverRequest() const;
  inline bool hasDiscoverRequest() const;
  inline  ::DiscoverRequest::Reader getDiscoverRequest() const;

  inline bool isDiscoverResponse() const;
  inline bool hasDiscoverResponse() const;
  inline  ::DiscoverResponse::Reader getDiscoverResponse() const;

  inline bool isDiscoverAckResponse() const;
  inline bool hasDiscoverAckResponse() const;
  inline  ::DiscoverAckResponse::Reader getDiscoverAckResponse() const;

  inline bool isSyncRequest() const;
  inline bool hasSyncRequest() const;
  inline  ::SyncRequest::Reader getSyncRequest() const;

  inline bool isSyncResponse() const;
  inline bool hasSyncResponse() const;
  inline  ::SyncResponse::Reader getSyncResponse() const;

  inline bool isErrorResponse() const;
  inline bool hasErrorResponse() const;
  inline  ::ErrorResponse::Reader getErrorResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RPC::Kind::Builder {
public:
  typedef Kind Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::VOID);

  inline bool isDiscoverRequest();
  inline bool hasDiscoverRequest();
  inline  ::DiscoverRequest::Builder getDiscoverRequest();
  inline void setDiscoverRequest( ::DiscoverRequest::Reader value);
  inline  ::DiscoverRequest::Builder initDiscoverRequest();
  inline void adoptDiscoverRequest(::capnp::Orphan< ::DiscoverRequest>&& value);
  inline ::capnp::Orphan< ::DiscoverRequest> disownDiscoverRequest();

  inline bool isDiscoverResponse();
  inline bool hasDiscoverResponse();
  inline  ::DiscoverResponse::Builder getDiscoverResponse();
  inline void setDiscoverResponse( ::DiscoverResponse::Reader value);
  inline  ::DiscoverResponse::Builder initDiscoverResponse();
  inline void adoptDiscoverResponse(::capnp::Orphan< ::DiscoverResponse>&& value);
  inline ::capnp::Orphan< ::DiscoverResponse> disownDiscoverResponse();

  inline bool isDiscoverAckResponse();
  inline bool hasDiscoverAckResponse();
  inline  ::DiscoverAckResponse::Builder getDiscoverAckResponse();
  inline void setDiscoverAckResponse( ::DiscoverAckResponse::Reader value);
  inline  ::DiscoverAckResponse::Builder initDiscoverAckResponse();
  inline void adoptDiscoverAckResponse(::capnp::Orphan< ::DiscoverAckResponse>&& value);
  inline ::capnp::Orphan< ::DiscoverAckResponse> disownDiscoverAckResponse();

  inline bool isSyncRequest();
  inline bool hasSyncRequest();
  inline  ::SyncRequest::Builder getSyncRequest();
  inline void setSyncRequest( ::SyncRequest::Reader value);
  inline  ::SyncRequest::Builder initSyncRequest();
  inline void adoptSyncRequest(::capnp::Orphan< ::SyncRequest>&& value);
  inline ::capnp::Orphan< ::SyncRequest> disownSyncRequest();

  inline bool isSyncResponse();
  inline bool hasSyncResponse();
  inline  ::SyncResponse::Builder getSyncResponse();
  inline void setSyncResponse( ::SyncResponse::Reader value);
  inline  ::SyncResponse::Builder initSyncResponse();
  inline void adoptSyncResponse(::capnp::Orphan< ::SyncResponse>&& value);
  inline ::capnp::Orphan< ::SyncResponse> disownSyncResponse();

  inline bool isErrorResponse();
  inline bool hasErrorResponse();
  inline  ::ErrorResponse::Builder getErrorResponse();
  inline void setErrorResponse( ::ErrorResponse::Reader value);
  inline  ::ErrorResponse::Builder initErrorResponse();
  inline void adoptErrorResponse(::capnp::Orphan< ::ErrorResponse>&& value);
  inline ::capnp::Orphan< ::ErrorResponse> disownErrorResponse();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RPC::Kind::Pipeline {
public:
  typedef Kind Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int64_t RPC::Reader::getDevice() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t RPC::Builder::getDevice() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void RPC::Builder::setDevice( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline typename RPC::Kind::Reader RPC::Reader::getKind() const {
  return RPC::Kind::Reader(_reader);
}
inline typename RPC::Kind::Builder RPC::Builder::getKind() {
  return RPC::Kind::Builder(_builder);
}
#if !CAPNP_LITE
inline typename RPC::Kind::Pipeline RPC::Pipeline::getKind() {
  return RPC::Kind::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename RPC::Kind::Builder RPC::Builder::initKind() {
  _builder.setDataField< ::uint16_t>(4 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return RPC::Kind::Builder(_builder);
}
inline  ::RPC::Kind::Which RPC::Kind::Reader::which() const {
  return _reader.getDataField<Which>(4 * ::capnp::ELEMENTS);
}
inline  ::RPC::Kind::Which RPC::Kind::Builder::which() {
  return _builder.getDataField<Which>(4 * ::capnp::ELEMENTS);
}

inline bool RPC::Kind::Reader::isUnknown() const {
  return which() == RPC::Kind::UNKNOWN;
}
inline bool RPC::Kind::Builder::isUnknown() {
  return which() == RPC::Kind::UNKNOWN;
}
inline  ::capnp::Void RPC::Kind::Reader::getUnknown() const {
  KJ_IREQUIRE((which() == RPC::Kind::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void RPC::Kind::Builder::getUnknown() {
  KJ_IREQUIRE((which() == RPC::Kind::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void RPC::Kind::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool RPC::Kind::Reader::isDiscoverRequest() const {
  return which() == RPC::Kind::DISCOVER_REQUEST;
}
inline bool RPC::Kind::Builder::isDiscoverRequest() {
  return which() == RPC::Kind::DISCOVER_REQUEST;
}
inline bool RPC::Kind::Reader::hasDiscoverRequest() const {
  if (which() != RPC::Kind::DISCOVER_REQUEST) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RPC::Kind::Builder::hasDiscoverRequest() {
  if (which() != RPC::Kind::DISCOVER_REQUEST) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::DiscoverRequest::Reader RPC::Kind::Reader::getDiscoverRequest() const {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverRequest>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::DiscoverRequest::Builder RPC::Kind::Builder::getDiscoverRequest() {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverRequest>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::setDiscoverRequest( ::DiscoverRequest::Reader value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_REQUEST);
  ::capnp::_::PointerHelpers< ::DiscoverRequest>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::DiscoverRequest::Builder RPC::Kind::Builder::initDiscoverRequest() {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_REQUEST);
  return ::capnp::_::PointerHelpers< ::DiscoverRequest>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::adoptDiscoverRequest(
    ::capnp::Orphan< ::DiscoverRequest>&& value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_REQUEST);
  ::capnp::_::PointerHelpers< ::DiscoverRequest>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DiscoverRequest> RPC::Kind::Builder::disownDiscoverRequest() {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverRequest>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RPC::Kind::Reader::isDiscoverResponse() const {
  return which() == RPC::Kind::DISCOVER_RESPONSE;
}
inline bool RPC::Kind::Builder::isDiscoverResponse() {
  return which() == RPC::Kind::DISCOVER_RESPONSE;
}
inline bool RPC::Kind::Reader::hasDiscoverResponse() const {
  if (which() != RPC::Kind::DISCOVER_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RPC::Kind::Builder::hasDiscoverResponse() {
  if (which() != RPC::Kind::DISCOVER_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::DiscoverResponse::Reader RPC::Kind::Reader::getDiscoverResponse() const {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::DiscoverResponse::Builder RPC::Kind::Builder::getDiscoverResponse() {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::setDiscoverResponse( ::DiscoverResponse::Reader value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_RESPONSE);
  ::capnp::_::PointerHelpers< ::DiscoverResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::DiscoverResponse::Builder RPC::Kind::Builder::initDiscoverResponse() {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_RESPONSE);
  return ::capnp::_::PointerHelpers< ::DiscoverResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::adoptDiscoverResponse(
    ::capnp::Orphan< ::DiscoverResponse>&& value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_RESPONSE);
  ::capnp::_::PointerHelpers< ::DiscoverResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DiscoverResponse> RPC::Kind::Builder::disownDiscoverResponse() {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RPC::Kind::Reader::isDiscoverAckResponse() const {
  return which() == RPC::Kind::DISCOVER_ACK_RESPONSE;
}
inline bool RPC::Kind::Builder::isDiscoverAckResponse() {
  return which() == RPC::Kind::DISCOVER_ACK_RESPONSE;
}
inline bool RPC::Kind::Reader::hasDiscoverAckResponse() const {
  if (which() != RPC::Kind::DISCOVER_ACK_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RPC::Kind::Builder::hasDiscoverAckResponse() {
  if (which() != RPC::Kind::DISCOVER_ACK_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::DiscoverAckResponse::Reader RPC::Kind::Reader::getDiscoverAckResponse() const {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_ACK_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverAckResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::DiscoverAckResponse::Builder RPC::Kind::Builder::getDiscoverAckResponse() {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_ACK_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverAckResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::setDiscoverAckResponse( ::DiscoverAckResponse::Reader value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_ACK_RESPONSE);
  ::capnp::_::PointerHelpers< ::DiscoverAckResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::DiscoverAckResponse::Builder RPC::Kind::Builder::initDiscoverAckResponse() {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_ACK_RESPONSE);
  return ::capnp::_::PointerHelpers< ::DiscoverAckResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::adoptDiscoverAckResponse(
    ::capnp::Orphan< ::DiscoverAckResponse>&& value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::DISCOVER_ACK_RESPONSE);
  ::capnp::_::PointerHelpers< ::DiscoverAckResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DiscoverAckResponse> RPC::Kind::Builder::disownDiscoverAckResponse() {
  KJ_IREQUIRE((which() == RPC::Kind::DISCOVER_ACK_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DiscoverAckResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RPC::Kind::Reader::isSyncRequest() const {
  return which() == RPC::Kind::SYNC_REQUEST;
}
inline bool RPC::Kind::Builder::isSyncRequest() {
  return which() == RPC::Kind::SYNC_REQUEST;
}
inline bool RPC::Kind::Reader::hasSyncRequest() const {
  if (which() != RPC::Kind::SYNC_REQUEST) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RPC::Kind::Builder::hasSyncRequest() {
  if (which() != RPC::Kind::SYNC_REQUEST) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::SyncRequest::Reader RPC::Kind::Reader::getSyncRequest() const {
  KJ_IREQUIRE((which() == RPC::Kind::SYNC_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SyncRequest>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::SyncRequest::Builder RPC::Kind::Builder::getSyncRequest() {
  KJ_IREQUIRE((which() == RPC::Kind::SYNC_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SyncRequest>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::setSyncRequest( ::SyncRequest::Reader value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::SYNC_REQUEST);
  ::capnp::_::PointerHelpers< ::SyncRequest>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::SyncRequest::Builder RPC::Kind::Builder::initSyncRequest() {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::SYNC_REQUEST);
  return ::capnp::_::PointerHelpers< ::SyncRequest>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::adoptSyncRequest(
    ::capnp::Orphan< ::SyncRequest>&& value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::SYNC_REQUEST);
  ::capnp::_::PointerHelpers< ::SyncRequest>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SyncRequest> RPC::Kind::Builder::disownSyncRequest() {
  KJ_IREQUIRE((which() == RPC::Kind::SYNC_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SyncRequest>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RPC::Kind::Reader::isSyncResponse() const {
  return which() == RPC::Kind::SYNC_RESPONSE;
}
inline bool RPC::Kind::Builder::isSyncResponse() {
  return which() == RPC::Kind::SYNC_RESPONSE;
}
inline bool RPC::Kind::Reader::hasSyncResponse() const {
  if (which() != RPC::Kind::SYNC_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RPC::Kind::Builder::hasSyncResponse() {
  if (which() != RPC::Kind::SYNC_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::SyncResponse::Reader RPC::Kind::Reader::getSyncResponse() const {
  KJ_IREQUIRE((which() == RPC::Kind::SYNC_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SyncResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::SyncResponse::Builder RPC::Kind::Builder::getSyncResponse() {
  KJ_IREQUIRE((which() == RPC::Kind::SYNC_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SyncResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::setSyncResponse( ::SyncResponse::Reader value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::SYNC_RESPONSE);
  ::capnp::_::PointerHelpers< ::SyncResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::SyncResponse::Builder RPC::Kind::Builder::initSyncResponse() {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::SYNC_RESPONSE);
  return ::capnp::_::PointerHelpers< ::SyncResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::adoptSyncResponse(
    ::capnp::Orphan< ::SyncResponse>&& value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::SYNC_RESPONSE);
  ::capnp::_::PointerHelpers< ::SyncResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SyncResponse> RPC::Kind::Builder::disownSyncResponse() {
  KJ_IREQUIRE((which() == RPC::Kind::SYNC_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SyncResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RPC::Kind::Reader::isErrorResponse() const {
  return which() == RPC::Kind::ERROR_RESPONSE;
}
inline bool RPC::Kind::Builder::isErrorResponse() {
  return which() == RPC::Kind::ERROR_RESPONSE;
}
inline bool RPC::Kind::Reader::hasErrorResponse() const {
  if (which() != RPC::Kind::ERROR_RESPONSE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RPC::Kind::Builder::hasErrorResponse() {
  if (which() != RPC::Kind::ERROR_RESPONSE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ErrorResponse::Reader RPC::Kind::Reader::getErrorResponse() const {
  KJ_IREQUIRE((which() == RPC::Kind::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ErrorResponse>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ErrorResponse::Builder RPC::Kind::Builder::getErrorResponse() {
  KJ_IREQUIRE((which() == RPC::Kind::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ErrorResponse>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::setErrorResponse( ::ErrorResponse::Reader value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::ERROR_RESPONSE);
  ::capnp::_::PointerHelpers< ::ErrorResponse>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ErrorResponse::Builder RPC::Kind::Builder::initErrorResponse() {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::ERROR_RESPONSE);
  return ::capnp::_::PointerHelpers< ::ErrorResponse>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RPC::Kind::Builder::adoptErrorResponse(
    ::capnp::Orphan< ::ErrorResponse>&& value) {
  _builder.setDataField<RPC::Kind::Which>(
      4 * ::capnp::ELEMENTS, RPC::Kind::ERROR_RESPONSE);
  ::capnp::_::PointerHelpers< ::ErrorResponse>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ErrorResponse> RPC::Kind::Builder::disownErrorResponse() {
  KJ_IREQUIRE((which() == RPC::Kind::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ErrorResponse>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_9cb224a79c99320d_
