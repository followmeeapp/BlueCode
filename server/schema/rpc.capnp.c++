// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: rpc.capnp

#include "rpc.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<39> b_f513e2652bb3e579 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    121, 229, 179,  43, 101, 226,  19, 245,
     10,   0,   0,   0,   1,   0,   2,   0,
     13,  50, 153, 156, 167,  36, 178, 156,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  46,  99,  97, 112, 110,
    112,  58,  82,  80,  67,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    208, 223,  31, 215,  26, 102, 133, 236,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 118, 105,  99, 101,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    107, 105, 110, 100,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f513e2652bb3e579 = b_f513e2652bb3e579.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f513e2652bb3e579[] = {
  &s_ec85661ad71fdfd0,
};
static const uint16_t m_f513e2652bb3e579[] = {0, 1};
static const uint16_t i_f513e2652bb3e579[] = {0, 1};
const ::capnp::_::RawSchema s_f513e2652bb3e579 = {
  0xf513e2652bb3e579, b_f513e2652bb3e579.words, 39, d_f513e2652bb3e579, m_f513e2652bb3e579,
  1, 2, i_f513e2652bb3e579, nullptr, nullptr, { &s_f513e2652bb3e579, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<129> b_ec85661ad71fdfd0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    208, 223,  31, 215,  26, 102, 133, 236,
     14,   0,   0,   0,   1,   0,   2,   0,
    121, 229, 179,  43, 101, 226,  19, 245,
      1,   0,   7,   0,   1,   0,   7,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  46,  99,  97, 112, 110,
    112,  58,  82,  80,  67,  46, 107, 105,
    110, 100,   0,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    184,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   0,   0,   0,   3,   0,   1,   0,
    208,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   0,   0,   0,   3,   0,   1,   0,
    228,   0,   0,   0,   2,   0,   1,   0,
      5,   0, 250, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,   0,   0,   0,   3,   0,   1,   0,
    236,   0,   0,   0,   2,   0,   1,   0,
      6,   0, 249, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
    244,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 107, 110, 111, 119, 110,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115,  99, 111, 118, 101, 114,
     82, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    157,  63, 100,  80, 170, 209,  72, 252,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115,  99, 111, 118, 101, 114,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    207,  79, 187, 183,  76, 193,  11, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115,  99, 111, 118, 101, 114,
     65,  99, 107,  82, 101, 115, 112, 111,
    110, 115, 101,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     33, 224, 168,  64,  59, 141,  77, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 121, 110,  99,  82, 101, 113, 117,
    101, 115, 116,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     72, 221, 170,  69,  15, 141,  66, 198,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 121, 110,  99,  82, 101, 115, 112,
    111, 110, 115, 101,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     28, 120, 223,  74, 100,  52, 102, 198,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,  82, 101, 115,
    112, 111, 110, 115, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     13,  86, 189, 149, 254, 130, 239, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ec85661ad71fdfd0 = b_ec85661ad71fdfd0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ec85661ad71fdfd0[] = {
  &s_bd0bc14cb7bb4fcf,
  &s_c6428d0f45aadd48,
  &s_c66634644adf781c,
  &s_ebef82fe95bd560d,
  &s_f513e2652bb3e579,
  &s_fc48d1aa50643f9d,
  &s_ff4d8d3b40a8e021,
};
static const uint16_t m_ec85661ad71fdfd0[] = {3, 1, 2, 6, 4, 5, 0};
static const uint16_t i_ec85661ad71fdfd0[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_ec85661ad71fdfd0 = {
  0xec85661ad71fdfd0, b_ec85661ad71fdfd0.words, 129, d_ec85661ad71fdfd0, m_ec85661ad71fdfd0,
  7, 7, i_ec85661ad71fdfd0, nullptr, nullptr, { &s_ec85661ad71fdfd0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// RPC
constexpr uint16_t RPC::_capnpPrivate::dataWordSize;
constexpr uint16_t RPC::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPC::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPC::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* RPC::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// RPC::Kind
constexpr uint16_t RPC::Kind::_capnpPrivate::dataWordSize;
constexpr uint16_t RPC::Kind::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RPC::Kind::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPC::Kind::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* RPC::Kind::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



